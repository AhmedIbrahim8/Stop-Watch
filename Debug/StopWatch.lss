
StopWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000237e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000237e  00002412  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800070  00800070  00002422  2**0
                  ALLOC
  3 .stab         000014c4  00000000  00000000  00002424  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ce0  00000000  00000000  000038e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000045c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00004728  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000048b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000068fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  000079fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00008980  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00008b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00008dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009650  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 77 06 	jmp	0xcee	; 0xcee <__vector_1>
       8:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__vector_2>
       c:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <__vector_3>
      10:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__vector_8>
      24:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__vector_18>
      4c:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 57 07 	call	0xeae	; 0xeae <main>
      8a:	0c 94 bd 11 	jmp	0x237a	; 0x237a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 86 11 	jmp	0x230c	; 0x230c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 86 11 	jmp	0x230c	; 0x230c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 96 11 	jmp	0x232c	; 0x232c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TIMER1_Application>:
#include"timer.h"
#include<avr/interrupt.h>
#include<util/delay.h>
volatile unsigned char second=0,minute=0,hour=0; // clock starts from 00:00:00
// ISR code of the TIMER1 will increment the second by 1 and check the condition
void TIMER1_Application(){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62

	second++;
     ca6:	80 91 70 00 	lds	r24, 0x0070
     caa:	8f 5f       	subi	r24, 0xFF	; 255
     cac:	80 93 70 00 	sts	0x0070, r24
	// check condition
	if(second == 60){ // if the second is 60 then it is one minute which is 00:01:00
     cb0:	80 91 70 00 	lds	r24, 0x0070
     cb4:	8c 33       	cpi	r24, 0x3C	; 60
     cb6:	c1 f4       	brne	.+48     	; 0xce8 <TIMER1_Application+0x4a>
	 second=0;  // here the second is 0
     cb8:	10 92 70 00 	sts	0x0070, r1
	 minute++;  // the minute will be incremented by one
     cbc:	80 91 71 00 	lds	r24, 0x0071
     cc0:	8f 5f       	subi	r24, 0xFF	; 255
     cc2:	80 93 71 00 	sts	0x0071, r24
	 if(minute == 60){// if minute become 60 then it is one houre which is 01:00:00
     cc6:	80 91 71 00 	lds	r24, 0x0071
     cca:	8c 33       	cpi	r24, 0x3C	; 60
     ccc:	69 f4       	brne	.+26     	; 0xce8 <TIMER1_Application+0x4a>
	    minute=0;
     cce:	10 92 71 00 	sts	0x0071, r1
	    hour++;
     cd2:	80 91 72 00 	lds	r24, 0x0072
     cd6:	8f 5f       	subi	r24, 0xFF	; 255
     cd8:	80 93 72 00 	sts	0x0072, r24
	     if(hour == 24){//if the hour become 24 we will clock again from the zer0
     cdc:	80 91 72 00 	lds	r24, 0x0072
     ce0:	88 31       	cpi	r24, 0x18	; 24
     ce2:	11 f4       	brne	.+4      	; 0xce8 <TIMER1_Application+0x4a>
	           hour=0;
     ce4:	10 92 72 00 	sts	0x0072, r1
	         }
	 }
	}
	// end of check
}
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <__vector_1>:
/* note: when the interrupt happened the avr will disable the I-BIT in the SREG register and enable it
 * again when the ISR code is done . that will disable the nesting interrupt feature so the I-bit should
 * be enabled in the ISR code
 * */
//reset button : it will put zero in all 6-7segment
ISR(INT0_vect){
     cee:	1f 92       	push	r1
     cf0:	0f 92       	push	r0
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	0f 92       	push	r0
     cf6:	11 24       	eor	r1, r1
     cf8:	8f 93       	push	r24
     cfa:	af 93       	push	r26
     cfc:	bf 93       	push	r27
     cfe:	ef 93       	push	r30
     d00:	ff 93       	push	r31
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
	SREG|=(1<<7); //to enable the global interrupt incase u press the other buttons
     d0a:	af e5       	ldi	r26, 0x5F	; 95
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	ef e5       	ldi	r30, 0x5F	; 95
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	80 68       	ori	r24, 0x80	; 128
     d16:	8c 93       	st	X, r24
	second=0;
     d18:	10 92 70 00 	sts	0x0070, r1
	minute=0;
     d1c:	10 92 71 00 	sts	0x0071, r1
	hour=0;
     d20:	10 92 72 00 	sts	0x0072, r1
}
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	ff 91       	pop	r31
     d2a:	ef 91       	pop	r30
     d2c:	bf 91       	pop	r27
     d2e:	af 91       	pop	r26
     d30:	8f 91       	pop	r24
     d32:	0f 90       	pop	r0
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	0f 90       	pop	r0
     d38:	1f 90       	pop	r1
     d3a:	18 95       	reti

00000d3c <__vector_2>:

//pause button
ISR(INT1_vect){
     d3c:	1f 92       	push	r1
     d3e:	0f 92       	push	r0
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	0f 92       	push	r0
     d44:	11 24       	eor	r1, r1
     d46:	8f 93       	push	r24
     d48:	af 93       	push	r26
     d4a:	bf 93       	push	r27
     d4c:	ef 93       	push	r30
     d4e:	ff 93       	push	r31
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
	SREG|=(1<<7); //to enable the global interrupt incase u press the other buttons
     d58:	af e5       	ldi	r26, 0x5F	; 95
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	ef e5       	ldi	r30, 0x5F	; 95
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	80 68       	ori	r24, 0x80	; 128
     d64:	8c 93       	st	X, r24
	TCCR1B&=~(1<<CS10)&~(1<<CS12); // stop the clock
     d66:	ae e4       	ldi	r26, 0x4E	; 78
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	ee e4       	ldi	r30, 0x4E	; 78
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	8a 7f       	andi	r24, 0xFA	; 250
     d72:	8c 93       	st	X, r24
}
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	ff 91       	pop	r31
     d7a:	ef 91       	pop	r30
     d7c:	bf 91       	pop	r27
     d7e:	af 91       	pop	r26
     d80:	8f 91       	pop	r24
     d82:	0f 90       	pop	r0
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	0f 90       	pop	r0
     d88:	1f 90       	pop	r1
     d8a:	18 95       	reti

00000d8c <__vector_18>:

//resume button
ISR(INT2_vect){
     d8c:	1f 92       	push	r1
     d8e:	0f 92       	push	r0
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	0f 92       	push	r0
     d94:	11 24       	eor	r1, r1
     d96:	8f 93       	push	r24
     d98:	af 93       	push	r26
     d9a:	bf 93       	push	r27
     d9c:	ef 93       	push	r30
     d9e:	ff 93       	push	r31
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
	SREG|=(1<<7); //to enable the global interrupt incase u press the other buttons
     da8:	af e5       	ldi	r26, 0x5F	; 95
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ef e5       	ldi	r30, 0x5F	; 95
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	80 68       	ori	r24, 0x80	; 128
     db4:	8c 93       	st	X, r24
	TCCR1B |= (1<<CS10) | (1<<CS12); // run the clock with prescalar 1024
     db6:	ae e4       	ldi	r26, 0x4E	; 78
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	ee e4       	ldi	r30, 0x4E	; 78
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	85 60       	ori	r24, 0x05	; 5
     dc2:	8c 93       	st	X, r24

}
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	ff 91       	pop	r31
     dca:	ef 91       	pop	r30
     dcc:	bf 91       	pop	r27
     dce:	af 91       	pop	r26
     dd0:	8f 91       	pop	r24
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	0f 90       	pop	r0
     dd8:	1f 90       	pop	r1
     dda:	18 95       	reti

00000ddc <INT0_Init>:


void INT0_Init(void){
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
	DDRD&=~(1<<PD2); // configuring the int0 pin as input pin
     de4:	a1 e3       	ldi	r26, 0x31	; 49
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e1 e3       	ldi	r30, 0x31	; 49
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8b 7f       	andi	r24, 0xFB	; 251
     df0:	8c 93       	st	X, r24
	PORTD|=(1<<PD2); // to enable the internal pull up resistor
     df2:	a2 e3       	ldi	r26, 0x32	; 50
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e2 e3       	ldi	r30, 0x32	; 50
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	84 60       	ori	r24, 0x04	; 4
     dfe:	8c 93       	st	X, r24
	GICR|=(1<<INT0); // to enable the external interuupt0
     e00:	ab e5       	ldi	r26, 0x5B	; 91
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	eb e5       	ldi	r30, 0x5B	; 91
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	80 64       	ori	r24, 0x40	; 64
     e0c:	8c 93       	st	X, r24
	MCUCR|=(1<<ISC01); //trigger with the falling edge
     e0e:	a5 e5       	ldi	r26, 0x55	; 85
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e5 e5       	ldi	r30, 0x55	; 85
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	82 60       	ori	r24, 0x02	; 2
     e1a:	8c 93       	st	X, r24
	MCUCR&=~(1<<ISC00); //trigger with the falling edge
     e1c:	a5 e5       	ldi	r26, 0x55	; 85
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e5 e5       	ldi	r30, 0x55	; 85
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	8e 7f       	andi	r24, 0xFE	; 254
     e28:	8c 93       	st	X, r24
}
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <INT1_Init>:
void INT1_Init(void){
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
	DDRD&=~(1<<PD3);// configuring the int1 pin as input pin
     e38:	a1 e3       	ldi	r26, 0x31	; 49
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e1 e3       	ldi	r30, 0x31	; 49
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	87 7f       	andi	r24, 0xF7	; 247
     e44:	8c 93       	st	X, r24
	GICR|=(1<<INT1); // to enable the external interuupt1
     e46:	ab e5       	ldi	r26, 0x5B	; 91
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	eb e5       	ldi	r30, 0x5B	; 91
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	80 68       	ori	r24, 0x80	; 128
     e52:	8c 93       	st	X, r24
	MCUCR|=(1<<ISC11)|(1<<ISC10);//trigger with the raising edge
     e54:	a5 e5       	ldi	r26, 0x55	; 85
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e5 e5       	ldi	r30, 0x55	; 85
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	8c 60       	ori	r24, 0x0C	; 12
     e60:	8c 93       	st	X, r24
}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <INT2_Init>:
void INT2_Init(void){
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	DDRB&=~(1<<PB2);// configuring the int2 pin as input pin
     e70:	a7 e3       	ldi	r26, 0x37	; 55
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e7 e3       	ldi	r30, 0x37	; 55
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	8b 7f       	andi	r24, 0xFB	; 251
     e7c:	8c 93       	st	X, r24
	PORTB|=(1<<PB2);// to enable the internal pull up resistor
     e7e:	a8 e3       	ldi	r26, 0x38	; 56
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e8 e3       	ldi	r30, 0x38	; 56
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	84 60       	ori	r24, 0x04	; 4
     e8a:	8c 93       	st	X, r24
	GICR|=(1<<INT2);// to enable the external interuupt2
     e8c:	ab e5       	ldi	r26, 0x5B	; 91
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	eb e5       	ldi	r30, 0x5B	; 91
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	80 62       	ori	r24, 0x20	; 32
     e98:	8c 93       	st	X, r24
	MCUCSR&=~(1<<ISC2);// trigger with the falling edge
     e9a:	a4 e5       	ldi	r26, 0x54	; 84
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e4 e5       	ldi	r30, 0x54	; 84
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	8f 7b       	andi	r24, 0xBF	; 191
     ea6:	8c 93       	st	X, r24
}
     ea8:	cf 91       	pop	r28
     eaa:	df 91       	pop	r29
     eac:	08 95       	ret

00000eae <main>:

int main(){
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	cd 59       	subi	r28, 0x9D	; 157
     ebc:	d0 40       	sbci	r29, 0x00	; 0
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
	TIMER_configType config={TIMER1,COMPARE_MODE_TIMER1,F_CPU_1024,0,0,1000};
     ec8:	ce 01       	movw	r24, r28
     eca:	8f 56       	subi	r24, 0x6F	; 111
     ecc:	9f 4f       	sbci	r25, 0xFF	; 255
     ece:	c7 56       	subi	r28, 0x67	; 103
     ed0:	df 4f       	sbci	r29, 0xFF	; 255
     ed2:	99 83       	std	Y+1, r25	; 0x01
     ed4:	88 83       	st	Y, r24
     ed6:	c9 59       	subi	r28, 0x99	; 153
     ed8:	d0 40       	sbci	r29, 0x00	; 0
     eda:	68 e6       	ldi	r22, 0x68	; 104
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	c5 56       	subi	r28, 0x65	; 101
     ee0:	df 4f       	sbci	r29, 0xFF	; 255
     ee2:	79 83       	std	Y+1, r23	; 0x01
     ee4:	68 83       	st	Y, r22
     ee6:	cb 59       	subi	r28, 0x9B	; 155
     ee8:	d0 40       	sbci	r29, 0x00	; 0
     eea:	78 e0       	ldi	r23, 0x08	; 8
     eec:	c3 56       	subi	r28, 0x63	; 99
     eee:	df 4f       	sbci	r29, 0xFF	; 255
     ef0:	78 83       	st	Y, r23
     ef2:	cd 59       	subi	r28, 0x9D	; 157
     ef4:	d0 40       	sbci	r29, 0x00	; 0
     ef6:	c5 56       	subi	r28, 0x65	; 101
     ef8:	df 4f       	sbci	r29, 0xFF	; 255
     efa:	e8 81       	ld	r30, Y
     efc:	f9 81       	ldd	r31, Y+1	; 0x01
     efe:	cb 59       	subi	r28, 0x9B	; 155
     f00:	d0 40       	sbci	r29, 0x00	; 0
     f02:	00 80       	ld	r0, Z
     f04:	c5 56       	subi	r28, 0x65	; 101
     f06:	df 4f       	sbci	r29, 0xFF	; 255
     f08:	68 81       	ld	r22, Y
     f0a:	79 81       	ldd	r23, Y+1	; 0x01
     f0c:	cb 59       	subi	r28, 0x9B	; 155
     f0e:	d0 40       	sbci	r29, 0x00	; 0
     f10:	6f 5f       	subi	r22, 0xFF	; 255
     f12:	7f 4f       	sbci	r23, 0xFF	; 255
     f14:	c5 56       	subi	r28, 0x65	; 101
     f16:	df 4f       	sbci	r29, 0xFF	; 255
     f18:	79 83       	std	Y+1, r23	; 0x01
     f1a:	68 83       	st	Y, r22
     f1c:	cb 59       	subi	r28, 0x9B	; 155
     f1e:	d0 40       	sbci	r29, 0x00	; 0
     f20:	c7 56       	subi	r28, 0x67	; 103
     f22:	df 4f       	sbci	r29, 0xFF	; 255
     f24:	e8 81       	ld	r30, Y
     f26:	f9 81       	ldd	r31, Y+1	; 0x01
     f28:	c9 59       	subi	r28, 0x99	; 153
     f2a:	d0 40       	sbci	r29, 0x00	; 0
     f2c:	00 82       	st	Z, r0
     f2e:	c7 56       	subi	r28, 0x67	; 103
     f30:	df 4f       	sbci	r29, 0xFF	; 255
     f32:	68 81       	ld	r22, Y
     f34:	79 81       	ldd	r23, Y+1	; 0x01
     f36:	c9 59       	subi	r28, 0x99	; 153
     f38:	d0 40       	sbci	r29, 0x00	; 0
     f3a:	6f 5f       	subi	r22, 0xFF	; 255
     f3c:	7f 4f       	sbci	r23, 0xFF	; 255
     f3e:	c7 56       	subi	r28, 0x67	; 103
     f40:	df 4f       	sbci	r29, 0xFF	; 255
     f42:	79 83       	std	Y+1, r23	; 0x01
     f44:	68 83       	st	Y, r22
     f46:	c9 59       	subi	r28, 0x99	; 153
     f48:	d0 40       	sbci	r29, 0x00	; 0
     f4a:	c3 56       	subi	r28, 0x63	; 99
     f4c:	df 4f       	sbci	r29, 0xFF	; 255
     f4e:	78 81       	ld	r23, Y
     f50:	cd 59       	subi	r28, 0x9D	; 157
     f52:	d0 40       	sbci	r29, 0x00	; 0
     f54:	71 50       	subi	r23, 0x01	; 1
     f56:	c3 56       	subi	r28, 0x63	; 99
     f58:	df 4f       	sbci	r29, 0xFF	; 255
     f5a:	78 83       	st	Y, r23
     f5c:	cd 59       	subi	r28, 0x9D	; 157
     f5e:	d0 40       	sbci	r29, 0x00	; 0
     f60:	c3 56       	subi	r28, 0x63	; 99
     f62:	df 4f       	sbci	r29, 0xFF	; 255
     f64:	88 81       	ld	r24, Y
     f66:	cd 59       	subi	r28, 0x9D	; 157
     f68:	d0 40       	sbci	r29, 0x00	; 0
     f6a:	88 23       	and	r24, r24
     f6c:	21 f6       	brne	.-120    	; 0xef6 <main+0x48>
	TIMER1_setCallBack(TIMER1_Application);
     f6e:	8f e4       	ldi	r24, 0x4F	; 79
     f70:	96 e0       	ldi	r25, 0x06	; 6
     f72:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TIMER1_setCallBack>
	TIMER_init(&config);
     f76:	ce 01       	movw	r24, r28
     f78:	8f 56       	subi	r24, 0x6F	; 111
     f7a:	9f 4f       	sbci	r25, 0xFF	; 255
     f7c:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <TIMER_init>
	DDRC = 0xFF; // to make portc o/p pins
     f80:	e4 e3       	ldi	r30, 0x34	; 52
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	8f ef       	ldi	r24, 0xFF	; 255
     f86:	80 83       	st	Z, r24
	PORTC=0xF0; // initial value to the first 4-pin (initializing with 0)
     f88:	e5 e3       	ldi	r30, 0x35	; 53
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 ef       	ldi	r24, 0xF0	; 240
     f8e:	80 83       	st	Z, r24
	DDRA = 0xFF;// to make portc o/p pins
     f90:	ea e3       	ldi	r30, 0x3A	; 58
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	8f ef       	ldi	r24, 0xFF	; 255
     f96:	80 83       	st	Z, r24
	PORTA=0xC0; // initialize with 1100 0000
     f98:	eb e3       	ldi	r30, 0x3B	; 59
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 ec       	ldi	r24, 0xC0	; 192
     f9e:	80 83       	st	Z, r24
	SREG|=(1<<7);//enable the gloabal interrupt
     fa0:	af e5       	ldi	r26, 0x5F	; 95
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	ef e5       	ldi	r30, 0x5F	; 95
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	80 68       	ori	r24, 0x80	; 128
     fac:	8c 93       	st	X, r24
	INT0_Init();
     fae:	0e 94 ee 06 	call	0xddc	; 0xddc <INT0_Init>
	INT1_Init();
     fb2:	0e 94 18 07 	call	0xe30	; 0xe30 <INT1_Init>
	INT2_Init();
     fb6:	0e 94 34 07 	call	0xe68	; 0xe68 <INT2_Init>
	while(1){
		// display the hour
		PORTC=(PORTC & 0xF0) | ((hour-(hour%10))/10);
     fba:	05 e3       	ldi	r16, 0x35	; 53
     fbc:	10 e0       	ldi	r17, 0x00	; 0
     fbe:	e5 e3       	ldi	r30, 0x35	; 53
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	40 7f       	andi	r20, 0xF0	; 240
     fc8:	80 91 72 00 	lds	r24, 0x0072
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	80 91 72 00 	lds	r24, 0x0072
     fd4:	9a e0       	ldi	r25, 0x0A	; 10
     fd6:	69 2f       	mov	r22, r25
     fd8:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__udivmodqi4>
     fdc:	89 2f       	mov	r24, r25
     fde:	88 2f       	mov	r24, r24
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	f9 01       	movw	r30, r18
     fe4:	e8 1b       	sub	r30, r24
     fe6:	f9 0b       	sbc	r31, r25
     fe8:	cf 01       	movw	r24, r30
     fea:	2a e0       	ldi	r18, 0x0A	; 10
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	b9 01       	movw	r22, r18
     ff0:	0e 94 5f 11 	call	0x22be	; 0x22be <__divmodhi4>
     ff4:	cb 01       	movw	r24, r22
     ff6:	84 2b       	or	r24, r20
     ff8:	f8 01       	movw	r30, r16
     ffa:	80 83       	st	Z, r24
		/*if hour is 14 so : 14%10 = 4 ..... 14-14%10 =10 ....(14-14%10)/10 = 1
		 * by this operation, we get the one and put it in the first 4 pin in portc
		 * */
		PORTA=(PORTA & 0xC0)|(1<<0); // to enable the first 7-segment
     ffc:	ab e3       	ldi	r26, 0x3B	; 59
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	eb e3       	ldi	r30, 0x3B	; 59
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	80 7c       	andi	r24, 0xC0	; 192
    1008:	81 60       	ori	r24, 0x01	; 1
    100a:	8c 93       	st	X, r24
    100c:	fe 01       	movw	r30, r28
    100e:	e3 57       	subi	r30, 0x73	; 115
    1010:	ff 4f       	sbci	r31, 0xFF	; 255
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	a0 e8       	ldi	r26, 0x80	; 128
    1018:	bf e3       	ldi	r27, 0x3F	; 63
    101a:	80 83       	st	Z, r24
    101c:	91 83       	std	Z+1, r25	; 0x01
    101e:	a2 83       	std	Z+2, r26	; 0x02
    1020:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1022:	8e 01       	movw	r16, r28
    1024:	07 57       	subi	r16, 0x77	; 119
    1026:	1f 4f       	sbci	r17, 0xFF	; 255
    1028:	fe 01       	movw	r30, r28
    102a:	e3 57       	subi	r30, 0x73	; 115
    102c:	ff 4f       	sbci	r31, 0xFF	; 255
    102e:	60 81       	ld	r22, Z
    1030:	71 81       	ldd	r23, Z+1	; 0x01
    1032:	82 81       	ldd	r24, Z+2	; 0x02
    1034:	93 81       	ldd	r25, Z+3	; 0x03
    1036:	2b ea       	ldi	r18, 0xAB	; 171
    1038:	3a ea       	ldi	r19, 0xAA	; 170
    103a:	4a ea       	ldi	r20, 0xAA	; 170
    103c:	5e e3       	ldi	r21, 0x3E	; 62
    103e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	f8 01       	movw	r30, r16
    1048:	80 83       	st	Z, r24
    104a:	91 83       	std	Z+1, r25	; 0x01
    104c:	a2 83       	std	Z+2, r26	; 0x02
    104e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1050:	fe 01       	movw	r30, r28
    1052:	e7 57       	subi	r30, 0x77	; 119
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	60 81       	ld	r22, Z
    1058:	71 81       	ldd	r23, Z+1	; 0x01
    105a:	82 81       	ldd	r24, Z+2	; 0x02
    105c:	93 81       	ldd	r25, Z+3	; 0x03
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	40 e8       	ldi	r20, 0x80	; 128
    1064:	5f e3       	ldi	r21, 0x3F	; 63
    1066:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    106a:	88 23       	and	r24, r24
    106c:	34 f4       	brge	.+12     	; 0x107a <main+0x1cc>
		__ticks = 1;
    106e:	fe 01       	movw	r30, r28
    1070:	e8 57       	subi	r30, 0x78	; 120
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	80 83       	st	Z, r24
    1078:	e0 c0       	rjmp	.+448    	; 0x123a <main+0x38c>
	else if (__tmp > 255)
    107a:	fe 01       	movw	r30, r28
    107c:	e7 57       	subi	r30, 0x77	; 119
    107e:	ff 4f       	sbci	r31, 0xFF	; 255
    1080:	60 81       	ld	r22, Z
    1082:	71 81       	ldd	r23, Z+1	; 0x01
    1084:	82 81       	ldd	r24, Z+2	; 0x02
    1086:	93 81       	ldd	r25, Z+3	; 0x03
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	4f e7       	ldi	r20, 0x7F	; 127
    108e:	53 e4       	ldi	r21, 0x43	; 67
    1090:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1094:	18 16       	cp	r1, r24
    1096:	0c f0       	brlt	.+2      	; 0x109a <main+0x1ec>
    1098:	c0 c0       	rjmp	.+384    	; 0x121a <main+0x36c>
	{
		_delay_ms(__us / 1000.0);
    109a:	fe 01       	movw	r30, r28
    109c:	e3 57       	subi	r30, 0x73	; 115
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	60 81       	ld	r22, Z
    10a2:	71 81       	ldd	r23, Z+1	; 0x01
    10a4:	82 81       	ldd	r24, Z+2	; 0x02
    10a6:	93 81       	ldd	r25, Z+3	; 0x03
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	4a e7       	ldi	r20, 0x7A	; 122
    10ae:	54 e4       	ldi	r21, 0x44	; 68
    10b0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	fe 01       	movw	r30, r28
    10ba:	ec 57       	subi	r30, 0x7C	; 124
    10bc:	ff 4f       	sbci	r31, 0xFF	; 255
    10be:	80 83       	st	Z, r24
    10c0:	91 83       	std	Z+1, r25	; 0x01
    10c2:	a2 83       	std	Z+2, r26	; 0x02
    10c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c6:	8e 01       	movw	r16, r28
    10c8:	00 58       	subi	r16, 0x80	; 128
    10ca:	1f 4f       	sbci	r17, 0xFF	; 255
    10cc:	fe 01       	movw	r30, r28
    10ce:	ec 57       	subi	r30, 0x7C	; 124
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	60 81       	ld	r22, Z
    10d4:	71 81       	ldd	r23, Z+1	; 0x01
    10d6:	82 81       	ldd	r24, Z+2	; 0x02
    10d8:	93 81       	ldd	r25, Z+3	; 0x03
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	4a e7       	ldi	r20, 0x7A	; 122
    10e0:	53 e4       	ldi	r21, 0x43	; 67
    10e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	f8 01       	movw	r30, r16
    10ec:	80 83       	st	Z, r24
    10ee:	91 83       	std	Z+1, r25	; 0x01
    10f0:	a2 83       	std	Z+2, r26	; 0x02
    10f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10f4:	fe 01       	movw	r30, r28
    10f6:	e0 58       	subi	r30, 0x80	; 128
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	60 81       	ld	r22, Z
    10fc:	71 81       	ldd	r23, Z+1	; 0x01
    10fe:	82 81       	ldd	r24, Z+2	; 0x02
    1100:	93 81       	ldd	r25, Z+3	; 0x03
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e8       	ldi	r20, 0x80	; 128
    1108:	5f e3       	ldi	r21, 0x3F	; 63
    110a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    110e:	88 23       	and	r24, r24
    1110:	44 f4       	brge	.+16     	; 0x1122 <main+0x274>
		__ticks = 1;
    1112:	fe 01       	movw	r30, r28
    1114:	e2 58       	subi	r30, 0x82	; 130
    1116:	ff 4f       	sbci	r31, 0xFF	; 255
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	91 83       	std	Z+1, r25	; 0x01
    111e:	80 83       	st	Z, r24
    1120:	64 c0       	rjmp	.+200    	; 0x11ea <main+0x33c>
	else if (__tmp > 65535)
    1122:	fe 01       	movw	r30, r28
    1124:	e0 58       	subi	r30, 0x80	; 128
    1126:	ff 4f       	sbci	r31, 0xFF	; 255
    1128:	60 81       	ld	r22, Z
    112a:	71 81       	ldd	r23, Z+1	; 0x01
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	93 81       	ldd	r25, Z+3	; 0x03
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	3f ef       	ldi	r19, 0xFF	; 255
    1134:	4f e7       	ldi	r20, 0x7F	; 127
    1136:	57 e4       	ldi	r21, 0x47	; 71
    1138:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    113c:	18 16       	cp	r1, r24
    113e:	0c f0       	brlt	.+2      	; 0x1142 <main+0x294>
    1140:	43 c0       	rjmp	.+134    	; 0x11c8 <main+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1142:	fe 01       	movw	r30, r28
    1144:	ec 57       	subi	r30, 0x7C	; 124
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	60 81       	ld	r22, Z
    114a:	71 81       	ldd	r23, Z+1	; 0x01
    114c:	82 81       	ldd	r24, Z+2	; 0x02
    114e:	93 81       	ldd	r25, Z+3	; 0x03
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e2       	ldi	r20, 0x20	; 32
    1156:	51 e4       	ldi	r21, 0x41	; 65
    1158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	8e 01       	movw	r16, r28
    1162:	02 58       	subi	r16, 0x82	; 130
    1164:	1f 4f       	sbci	r17, 0xFF	; 255
    1166:	bc 01       	movw	r22, r24
    1168:	cd 01       	movw	r24, r26
    116a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	f8 01       	movw	r30, r16
    1174:	91 83       	std	Z+1, r25	; 0x01
    1176:	80 83       	st	Z, r24
    1178:	1f c0       	rjmp	.+62     	; 0x11b8 <main+0x30a>
    117a:	fe 01       	movw	r30, r28
    117c:	e4 58       	subi	r30, 0x84	; 132
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	89 e1       	ldi	r24, 0x19	; 25
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	91 83       	std	Z+1, r25	; 0x01
    1186:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1188:	fe 01       	movw	r30, r28
    118a:	e4 58       	subi	r30, 0x84	; 132
    118c:	ff 4f       	sbci	r31, 0xFF	; 255
    118e:	80 81       	ld	r24, Z
    1190:	91 81       	ldd	r25, Z+1	; 0x01
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	f1 f7       	brne	.-4      	; 0x1192 <main+0x2e4>
    1196:	fe 01       	movw	r30, r28
    1198:	e4 58       	subi	r30, 0x84	; 132
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	91 83       	std	Z+1, r25	; 0x01
    119e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a0:	de 01       	movw	r26, r28
    11a2:	a2 58       	subi	r26, 0x82	; 130
    11a4:	bf 4f       	sbci	r27, 0xFF	; 255
    11a6:	fe 01       	movw	r30, r28
    11a8:	e2 58       	subi	r30, 0x82	; 130
    11aa:	ff 4f       	sbci	r31, 0xFF	; 255
    11ac:	80 81       	ld	r24, Z
    11ae:	91 81       	ldd	r25, Z+1	; 0x01
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	11 96       	adiw	r26, 0x01	; 1
    11b4:	9c 93       	st	X, r25
    11b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b8:	fe 01       	movw	r30, r28
    11ba:	e2 58       	subi	r30, 0x82	; 130
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	80 81       	ld	r24, Z
    11c0:	91 81       	ldd	r25, Z+1	; 0x01
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	d1 f6       	brne	.-76     	; 0x117a <main+0x2cc>
    11c6:	4b c0       	rjmp	.+150    	; 0x125e <main+0x3b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c8:	8e 01       	movw	r16, r28
    11ca:	02 58       	subi	r16, 0x82	; 130
    11cc:	1f 4f       	sbci	r17, 0xFF	; 255
    11ce:	fe 01       	movw	r30, r28
    11d0:	e0 58       	subi	r30, 0x80	; 128
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
    11d4:	60 81       	ld	r22, Z
    11d6:	71 81       	ldd	r23, Z+1	; 0x01
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	f8 01       	movw	r30, r16
    11e6:	91 83       	std	Z+1, r25	; 0x01
    11e8:	80 83       	st	Z, r24
    11ea:	de 01       	movw	r26, r28
    11ec:	a6 58       	subi	r26, 0x86	; 134
    11ee:	bf 4f       	sbci	r27, 0xFF	; 255
    11f0:	fe 01       	movw	r30, r28
    11f2:	e2 58       	subi	r30, 0x82	; 130
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	80 81       	ld	r24, Z
    11f8:	91 81       	ldd	r25, Z+1	; 0x01
    11fa:	11 96       	adiw	r26, 0x01	; 1
    11fc:	9c 93       	st	X, r25
    11fe:	8e 93       	st	-X, r24
    1200:	fe 01       	movw	r30, r28
    1202:	e6 58       	subi	r30, 0x86	; 134
    1204:	ff 4f       	sbci	r31, 0xFF	; 255
    1206:	80 81       	ld	r24, Z
    1208:	91 81       	ldd	r25, Z+1	; 0x01
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	f1 f7       	brne	.-4      	; 0x120a <main+0x35c>
    120e:	fe 01       	movw	r30, r28
    1210:	e6 58       	subi	r30, 0x86	; 134
    1212:	ff 4f       	sbci	r31, 0xFF	; 255
    1214:	91 83       	std	Z+1, r25	; 0x01
    1216:	80 83       	st	Z, r24
    1218:	22 c0       	rjmp	.+68     	; 0x125e <main+0x3b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    121a:	8e 01       	movw	r16, r28
    121c:	08 57       	subi	r16, 0x78	; 120
    121e:	1f 4f       	sbci	r17, 0xFF	; 255
    1220:	fe 01       	movw	r30, r28
    1222:	e7 57       	subi	r30, 0x77	; 119
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	60 81       	ld	r22, Z
    1228:	71 81       	ldd	r23, Z+1	; 0x01
    122a:	82 81       	ldd	r24, Z+2	; 0x02
    122c:	93 81       	ldd	r25, Z+3	; 0x03
    122e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	f8 01       	movw	r30, r16
    1238:	80 83       	st	Z, r24
    123a:	de 01       	movw	r26, r28
    123c:	a7 58       	subi	r26, 0x87	; 135
    123e:	bf 4f       	sbci	r27, 0xFF	; 255
    1240:	fe 01       	movw	r30, r28
    1242:	e8 57       	subi	r30, 0x78	; 120
    1244:	ff 4f       	sbci	r31, 0xFF	; 255
    1246:	80 81       	ld	r24, Z
    1248:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    124a:	fe 01       	movw	r30, r28
    124c:	e7 58       	subi	r30, 0x87	; 135
    124e:	ff 4f       	sbci	r31, 0xFF	; 255
    1250:	80 81       	ld	r24, Z
    1252:	8a 95       	dec	r24
    1254:	f1 f7       	brne	.-4      	; 0x1252 <main+0x3a4>
    1256:	fe 01       	movw	r30, r28
    1258:	e7 58       	subi	r30, 0x87	; 135
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	80 83       	st	Z, r24
		_delay_us(1); // this is important to display the number.. without it the 7-segment will output wrong number
		PORTA=PORTA & 0xC0; // disable  the first 7-segment
    125e:	ab e3       	ldi	r26, 0x3B	; 59
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	eb e3       	ldi	r30, 0x3B	; 59
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	80 7c       	andi	r24, 0xC0	; 192
    126a:	8c 93       	st	X, r24

		// display the hour
		PORTC=(PORTC & 0xF0) | (hour%10);
    126c:	a5 e3       	ldi	r26, 0x35	; 53
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e5 e3       	ldi	r30, 0x35	; 53
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	28 2f       	mov	r18, r24
    1278:	20 7f       	andi	r18, 0xF0	; 240
    127a:	80 91 72 00 	lds	r24, 0x0072
    127e:	9a e0       	ldi	r25, 0x0A	; 10
    1280:	69 2f       	mov	r22, r25
    1282:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__udivmodqi4>
    1286:	89 2f       	mov	r24, r25
    1288:	82 2b       	or	r24, r18
    128a:	8c 93       	st	X, r24
		/*same example if hour is 14 : 14%10 = 4
		 * by this operation, we get the 4 and put it in the first 4 pin in portc
		 * */
		PORTA=(PORTA & 0xC0)|(1<<1);// to enable the second 7-segment
    128c:	ab e3       	ldi	r26, 0x3B	; 59
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	eb e3       	ldi	r30, 0x3B	; 59
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	80 7c       	andi	r24, 0xC0	; 192
    1298:	82 60       	ori	r24, 0x02	; 2
    129a:	8c 93       	st	X, r24
    129c:	fe 01       	movw	r30, r28
    129e:	eb 58       	subi	r30, 0x8B	; 139
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	a0 e8       	ldi	r26, 0x80	; 128
    12a8:	bf e3       	ldi	r27, 0x3F	; 63
    12aa:	80 83       	st	Z, r24
    12ac:	91 83       	std	Z+1, r25	; 0x01
    12ae:	a2 83       	std	Z+2, r26	; 0x02
    12b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    12b2:	8e 01       	movw	r16, r28
    12b4:	0f 58       	subi	r16, 0x8F	; 143
    12b6:	1f 4f       	sbci	r17, 0xFF	; 255
    12b8:	fe 01       	movw	r30, r28
    12ba:	eb 58       	subi	r30, 0x8B	; 139
    12bc:	ff 4f       	sbci	r31, 0xFF	; 255
    12be:	60 81       	ld	r22, Z
    12c0:	71 81       	ldd	r23, Z+1	; 0x01
    12c2:	82 81       	ldd	r24, Z+2	; 0x02
    12c4:	93 81       	ldd	r25, Z+3	; 0x03
    12c6:	2b ea       	ldi	r18, 0xAB	; 171
    12c8:	3a ea       	ldi	r19, 0xAA	; 170
    12ca:	4a ea       	ldi	r20, 0xAA	; 170
    12cc:	5e e3       	ldi	r21, 0x3E	; 62
    12ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	f8 01       	movw	r30, r16
    12d8:	80 83       	st	Z, r24
    12da:	91 83       	std	Z+1, r25	; 0x01
    12dc:	a2 83       	std	Z+2, r26	; 0x02
    12de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12e0:	fe 01       	movw	r30, r28
    12e2:	ef 58       	subi	r30, 0x8F	; 143
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	60 81       	ld	r22, Z
    12e8:	71 81       	ldd	r23, Z+1	; 0x01
    12ea:	82 81       	ldd	r24, Z+2	; 0x02
    12ec:	93 81       	ldd	r25, Z+3	; 0x03
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	40 e8       	ldi	r20, 0x80	; 128
    12f4:	5f e3       	ldi	r21, 0x3F	; 63
    12f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12fa:	88 23       	and	r24, r24
    12fc:	34 f4       	brge	.+12     	; 0x130a <main+0x45c>
		__ticks = 1;
    12fe:	fe 01       	movw	r30, r28
    1300:	e0 59       	subi	r30, 0x90	; 144
    1302:	ff 4f       	sbci	r31, 0xFF	; 255
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	80 83       	st	Z, r24
    1308:	e0 c0       	rjmp	.+448    	; 0x14ca <main+0x61c>
	else if (__tmp > 255)
    130a:	fe 01       	movw	r30, r28
    130c:	ef 58       	subi	r30, 0x8F	; 143
    130e:	ff 4f       	sbci	r31, 0xFF	; 255
    1310:	60 81       	ld	r22, Z
    1312:	71 81       	ldd	r23, Z+1	; 0x01
    1314:	82 81       	ldd	r24, Z+2	; 0x02
    1316:	93 81       	ldd	r25, Z+3	; 0x03
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	4f e7       	ldi	r20, 0x7F	; 127
    131e:	53 e4       	ldi	r21, 0x43	; 67
    1320:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1324:	18 16       	cp	r1, r24
    1326:	0c f0       	brlt	.+2      	; 0x132a <main+0x47c>
    1328:	c0 c0       	rjmp	.+384    	; 0x14aa <main+0x5fc>
	{
		_delay_ms(__us / 1000.0);
    132a:	fe 01       	movw	r30, r28
    132c:	eb 58       	subi	r30, 0x8B	; 139
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	60 81       	ld	r22, Z
    1332:	71 81       	ldd	r23, Z+1	; 0x01
    1334:	82 81       	ldd	r24, Z+2	; 0x02
    1336:	93 81       	ldd	r25, Z+3	; 0x03
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	4a e7       	ldi	r20, 0x7A	; 122
    133e:	54 e4       	ldi	r21, 0x44	; 68
    1340:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	fe 01       	movw	r30, r28
    134a:	e4 59       	subi	r30, 0x94	; 148
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	80 83       	st	Z, r24
    1350:	91 83       	std	Z+1, r25	; 0x01
    1352:	a2 83       	std	Z+2, r26	; 0x02
    1354:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1356:	8e 01       	movw	r16, r28
    1358:	08 59       	subi	r16, 0x98	; 152
    135a:	1f 4f       	sbci	r17, 0xFF	; 255
    135c:	fe 01       	movw	r30, r28
    135e:	e4 59       	subi	r30, 0x94	; 148
    1360:	ff 4f       	sbci	r31, 0xFF	; 255
    1362:	60 81       	ld	r22, Z
    1364:	71 81       	ldd	r23, Z+1	; 0x01
    1366:	82 81       	ldd	r24, Z+2	; 0x02
    1368:	93 81       	ldd	r25, Z+3	; 0x03
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	4a e7       	ldi	r20, 0x7A	; 122
    1370:	53 e4       	ldi	r21, 0x43	; 67
    1372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	f8 01       	movw	r30, r16
    137c:	80 83       	st	Z, r24
    137e:	91 83       	std	Z+1, r25	; 0x01
    1380:	a2 83       	std	Z+2, r26	; 0x02
    1382:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1384:	fe 01       	movw	r30, r28
    1386:	e8 59       	subi	r30, 0x98	; 152
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	60 81       	ld	r22, Z
    138c:	71 81       	ldd	r23, Z+1	; 0x01
    138e:	82 81       	ldd	r24, Z+2	; 0x02
    1390:	93 81       	ldd	r25, Z+3	; 0x03
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	40 e8       	ldi	r20, 0x80	; 128
    1398:	5f e3       	ldi	r21, 0x3F	; 63
    139a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    139e:	88 23       	and	r24, r24
    13a0:	44 f4       	brge	.+16     	; 0x13b2 <main+0x504>
		__ticks = 1;
    13a2:	fe 01       	movw	r30, r28
    13a4:	ea 59       	subi	r30, 0x9A	; 154
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	91 83       	std	Z+1, r25	; 0x01
    13ae:	80 83       	st	Z, r24
    13b0:	64 c0       	rjmp	.+200    	; 0x147a <main+0x5cc>
	else if (__tmp > 65535)
    13b2:	fe 01       	movw	r30, r28
    13b4:	e8 59       	subi	r30, 0x98	; 152
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	60 81       	ld	r22, Z
    13ba:	71 81       	ldd	r23, Z+1	; 0x01
    13bc:	82 81       	ldd	r24, Z+2	; 0x02
    13be:	93 81       	ldd	r25, Z+3	; 0x03
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	3f ef       	ldi	r19, 0xFF	; 255
    13c4:	4f e7       	ldi	r20, 0x7F	; 127
    13c6:	57 e4       	ldi	r21, 0x47	; 71
    13c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13cc:	18 16       	cp	r1, r24
    13ce:	0c f0       	brlt	.+2      	; 0x13d2 <main+0x524>
    13d0:	43 c0       	rjmp	.+134    	; 0x1458 <main+0x5aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d2:	fe 01       	movw	r30, r28
    13d4:	e4 59       	subi	r30, 0x94	; 148
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	60 81       	ld	r22, Z
    13da:	71 81       	ldd	r23, Z+1	; 0x01
    13dc:	82 81       	ldd	r24, Z+2	; 0x02
    13de:	93 81       	ldd	r25, Z+3	; 0x03
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e2       	ldi	r20, 0x20	; 32
    13e6:	51 e4       	ldi	r21, 0x41	; 65
    13e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	8e 01       	movw	r16, r28
    13f2:	0a 59       	subi	r16, 0x9A	; 154
    13f4:	1f 4f       	sbci	r17, 0xFF	; 255
    13f6:	bc 01       	movw	r22, r24
    13f8:	cd 01       	movw	r24, r26
    13fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	f8 01       	movw	r30, r16
    1404:	91 83       	std	Z+1, r25	; 0x01
    1406:	80 83       	st	Z, r24
    1408:	1f c0       	rjmp	.+62     	; 0x1448 <main+0x59a>
    140a:	fe 01       	movw	r30, r28
    140c:	ec 59       	subi	r30, 0x9C	; 156
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	89 e1       	ldi	r24, 0x19	; 25
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	91 83       	std	Z+1, r25	; 0x01
    1416:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1418:	fe 01       	movw	r30, r28
    141a:	ec 59       	subi	r30, 0x9C	; 156
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	80 81       	ld	r24, Z
    1420:	91 81       	ldd	r25, Z+1	; 0x01
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	f1 f7       	brne	.-4      	; 0x1422 <main+0x574>
    1426:	fe 01       	movw	r30, r28
    1428:	ec 59       	subi	r30, 0x9C	; 156
    142a:	ff 4f       	sbci	r31, 0xFF	; 255
    142c:	91 83       	std	Z+1, r25	; 0x01
    142e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1430:	de 01       	movw	r26, r28
    1432:	aa 59       	subi	r26, 0x9A	; 154
    1434:	bf 4f       	sbci	r27, 0xFF	; 255
    1436:	fe 01       	movw	r30, r28
    1438:	ea 59       	subi	r30, 0x9A	; 154
    143a:	ff 4f       	sbci	r31, 0xFF	; 255
    143c:	80 81       	ld	r24, Z
    143e:	91 81       	ldd	r25, Z+1	; 0x01
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	11 96       	adiw	r26, 0x01	; 1
    1444:	9c 93       	st	X, r25
    1446:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1448:	fe 01       	movw	r30, r28
    144a:	ea 59       	subi	r30, 0x9A	; 154
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	80 81       	ld	r24, Z
    1450:	91 81       	ldd	r25, Z+1	; 0x01
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	d1 f6       	brne	.-76     	; 0x140a <main+0x55c>
    1456:	4b c0       	rjmp	.+150    	; 0x14ee <main+0x640>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1458:	8e 01       	movw	r16, r28
    145a:	0a 59       	subi	r16, 0x9A	; 154
    145c:	1f 4f       	sbci	r17, 0xFF	; 255
    145e:	fe 01       	movw	r30, r28
    1460:	e8 59       	subi	r30, 0x98	; 152
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	60 81       	ld	r22, Z
    1466:	71 81       	ldd	r23, Z+1	; 0x01
    1468:	82 81       	ldd	r24, Z+2	; 0x02
    146a:	93 81       	ldd	r25, Z+3	; 0x03
    146c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	f8 01       	movw	r30, r16
    1476:	91 83       	std	Z+1, r25	; 0x01
    1478:	80 83       	st	Z, r24
    147a:	de 01       	movw	r26, r28
    147c:	ae 59       	subi	r26, 0x9E	; 158
    147e:	bf 4f       	sbci	r27, 0xFF	; 255
    1480:	fe 01       	movw	r30, r28
    1482:	ea 59       	subi	r30, 0x9A	; 154
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	80 81       	ld	r24, Z
    1488:	91 81       	ldd	r25, Z+1	; 0x01
    148a:	11 96       	adiw	r26, 0x01	; 1
    148c:	9c 93       	st	X, r25
    148e:	8e 93       	st	-X, r24
    1490:	fe 01       	movw	r30, r28
    1492:	ee 59       	subi	r30, 0x9E	; 158
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	80 81       	ld	r24, Z
    1498:	91 81       	ldd	r25, Z+1	; 0x01
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	f1 f7       	brne	.-4      	; 0x149a <main+0x5ec>
    149e:	fe 01       	movw	r30, r28
    14a0:	ee 59       	subi	r30, 0x9E	; 158
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	91 83       	std	Z+1, r25	; 0x01
    14a6:	80 83       	st	Z, r24
    14a8:	22 c0       	rjmp	.+68     	; 0x14ee <main+0x640>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14aa:	8e 01       	movw	r16, r28
    14ac:	00 59       	subi	r16, 0x90	; 144
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	fe 01       	movw	r30, r28
    14b2:	ef 58       	subi	r30, 0x8F	; 143
    14b4:	ff 4f       	sbci	r31, 0xFF	; 255
    14b6:	60 81       	ld	r22, Z
    14b8:	71 81       	ldd	r23, Z+1	; 0x01
    14ba:	82 81       	ldd	r24, Z+2	; 0x02
    14bc:	93 81       	ldd	r25, Z+3	; 0x03
    14be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	f8 01       	movw	r30, r16
    14c8:	80 83       	st	Z, r24
    14ca:	de 01       	movw	r26, r28
    14cc:	af 59       	subi	r26, 0x9F	; 159
    14ce:	bf 4f       	sbci	r27, 0xFF	; 255
    14d0:	fe 01       	movw	r30, r28
    14d2:	e0 59       	subi	r30, 0x90	; 144
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	80 81       	ld	r24, Z
    14d8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14da:	fe 01       	movw	r30, r28
    14dc:	ef 59       	subi	r30, 0x9F	; 159
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	80 81       	ld	r24, Z
    14e2:	8a 95       	dec	r24
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <main+0x634>
    14e6:	fe 01       	movw	r30, r28
    14e8:	ef 59       	subi	r30, 0x9F	; 159
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	80 83       	st	Z, r24
		_delay_us(1);
		PORTA=PORTA & 0xC0;
    14ee:	ab e3       	ldi	r26, 0x3B	; 59
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	eb e3       	ldi	r30, 0x3B	; 59
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	80 7c       	andi	r24, 0xC0	; 192
    14fa:	8c 93       	st	X, r24

		// display the minute
		PORTC=(PORTC & 0xF0) | ((minute-(minute%10))/10);
    14fc:	05 e3       	ldi	r16, 0x35	; 53
    14fe:	10 e0       	ldi	r17, 0x00	; 0
    1500:	e5 e3       	ldi	r30, 0x35	; 53
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	48 2f       	mov	r20, r24
    1508:	40 7f       	andi	r20, 0xF0	; 240
    150a:	80 91 71 00 	lds	r24, 0x0071
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	80 91 71 00 	lds	r24, 0x0071
    1516:	9a e0       	ldi	r25, 0x0A	; 10
    1518:	69 2f       	mov	r22, r25
    151a:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__udivmodqi4>
    151e:	89 2f       	mov	r24, r25
    1520:	88 2f       	mov	r24, r24
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	b9 01       	movw	r22, r18
    1526:	68 1b       	sub	r22, r24
    1528:	79 0b       	sbc	r23, r25
    152a:	cb 01       	movw	r24, r22
    152c:	2a e0       	ldi	r18, 0x0A	; 10
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	b9 01       	movw	r22, r18
    1532:	0e 94 5f 11 	call	0x22be	; 0x22be <__divmodhi4>
    1536:	cb 01       	movw	r24, r22
    1538:	84 2b       	or	r24, r20
    153a:	f8 01       	movw	r30, r16
    153c:	80 83       	st	Z, r24
		PORTA=(PORTA & 0xC0)|(1<<2);
    153e:	ab e3       	ldi	r26, 0x3B	; 59
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	eb e3       	ldi	r30, 0x3B	; 59
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	80 7c       	andi	r24, 0xC0	; 192
    154a:	84 60       	ori	r24, 0x04	; 4
    154c:	8c 93       	st	X, r24
    154e:	fe 01       	movw	r30, r28
    1550:	e3 5a       	subi	r30, 0xA3	; 163
    1552:	ff 4f       	sbci	r31, 0xFF	; 255
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	a0 e8       	ldi	r26, 0x80	; 128
    155a:	bf e3       	ldi	r27, 0x3F	; 63
    155c:	80 83       	st	Z, r24
    155e:	91 83       	std	Z+1, r25	; 0x01
    1560:	a2 83       	std	Z+2, r26	; 0x02
    1562:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1564:	8e 01       	movw	r16, r28
    1566:	07 5a       	subi	r16, 0xA7	; 167
    1568:	1f 4f       	sbci	r17, 0xFF	; 255
    156a:	fe 01       	movw	r30, r28
    156c:	e3 5a       	subi	r30, 0xA3	; 163
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	60 81       	ld	r22, Z
    1572:	71 81       	ldd	r23, Z+1	; 0x01
    1574:	82 81       	ldd	r24, Z+2	; 0x02
    1576:	93 81       	ldd	r25, Z+3	; 0x03
    1578:	2b ea       	ldi	r18, 0xAB	; 171
    157a:	3a ea       	ldi	r19, 0xAA	; 170
    157c:	4a ea       	ldi	r20, 0xAA	; 170
    157e:	5e e3       	ldi	r21, 0x3E	; 62
    1580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	f8 01       	movw	r30, r16
    158a:	80 83       	st	Z, r24
    158c:	91 83       	std	Z+1, r25	; 0x01
    158e:	a2 83       	std	Z+2, r26	; 0x02
    1590:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1592:	fe 01       	movw	r30, r28
    1594:	e7 5a       	subi	r30, 0xA7	; 167
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	60 81       	ld	r22, Z
    159a:	71 81       	ldd	r23, Z+1	; 0x01
    159c:	82 81       	ldd	r24, Z+2	; 0x02
    159e:	93 81       	ldd	r25, Z+3	; 0x03
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	40 e8       	ldi	r20, 0x80	; 128
    15a6:	5f e3       	ldi	r21, 0x3F	; 63
    15a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15ac:	88 23       	and	r24, r24
    15ae:	34 f4       	brge	.+12     	; 0x15bc <main+0x70e>
		__ticks = 1;
    15b0:	fe 01       	movw	r30, r28
    15b2:	e8 5a       	subi	r30, 0xA8	; 168
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	80 83       	st	Z, r24
    15ba:	e0 c0       	rjmp	.+448    	; 0x177c <main+0x8ce>
	else if (__tmp > 255)
    15bc:	fe 01       	movw	r30, r28
    15be:	e7 5a       	subi	r30, 0xA7	; 167
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	60 81       	ld	r22, Z
    15c4:	71 81       	ldd	r23, Z+1	; 0x01
    15c6:	82 81       	ldd	r24, Z+2	; 0x02
    15c8:	93 81       	ldd	r25, Z+3	; 0x03
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	4f e7       	ldi	r20, 0x7F	; 127
    15d0:	53 e4       	ldi	r21, 0x43	; 67
    15d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15d6:	18 16       	cp	r1, r24
    15d8:	0c f0       	brlt	.+2      	; 0x15dc <main+0x72e>
    15da:	c0 c0       	rjmp	.+384    	; 0x175c <main+0x8ae>
	{
		_delay_ms(__us / 1000.0);
    15dc:	fe 01       	movw	r30, r28
    15de:	e3 5a       	subi	r30, 0xA3	; 163
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	60 81       	ld	r22, Z
    15e4:	71 81       	ldd	r23, Z+1	; 0x01
    15e6:	82 81       	ldd	r24, Z+2	; 0x02
    15e8:	93 81       	ldd	r25, Z+3	; 0x03
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	4a e7       	ldi	r20, 0x7A	; 122
    15f0:	54 e4       	ldi	r21, 0x44	; 68
    15f2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	fe 01       	movw	r30, r28
    15fc:	ec 5a       	subi	r30, 0xAC	; 172
    15fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1600:	80 83       	st	Z, r24
    1602:	91 83       	std	Z+1, r25	; 0x01
    1604:	a2 83       	std	Z+2, r26	; 0x02
    1606:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1608:	8e 01       	movw	r16, r28
    160a:	00 5b       	subi	r16, 0xB0	; 176
    160c:	1f 4f       	sbci	r17, 0xFF	; 255
    160e:	fe 01       	movw	r30, r28
    1610:	ec 5a       	subi	r30, 0xAC	; 172
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	60 81       	ld	r22, Z
    1616:	71 81       	ldd	r23, Z+1	; 0x01
    1618:	82 81       	ldd	r24, Z+2	; 0x02
    161a:	93 81       	ldd	r25, Z+3	; 0x03
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	4a e7       	ldi	r20, 0x7A	; 122
    1622:	53 e4       	ldi	r21, 0x43	; 67
    1624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	f8 01       	movw	r30, r16
    162e:	80 83       	st	Z, r24
    1630:	91 83       	std	Z+1, r25	; 0x01
    1632:	a2 83       	std	Z+2, r26	; 0x02
    1634:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1636:	fe 01       	movw	r30, r28
    1638:	e0 5b       	subi	r30, 0xB0	; 176
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	60 81       	ld	r22, Z
    163e:	71 81       	ldd	r23, Z+1	; 0x01
    1640:	82 81       	ldd	r24, Z+2	; 0x02
    1642:	93 81       	ldd	r25, Z+3	; 0x03
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	40 e8       	ldi	r20, 0x80	; 128
    164a:	5f e3       	ldi	r21, 0x3F	; 63
    164c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1650:	88 23       	and	r24, r24
    1652:	44 f4       	brge	.+16     	; 0x1664 <main+0x7b6>
		__ticks = 1;
    1654:	fe 01       	movw	r30, r28
    1656:	e2 5b       	subi	r30, 0xB2	; 178
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	91 83       	std	Z+1, r25	; 0x01
    1660:	80 83       	st	Z, r24
    1662:	64 c0       	rjmp	.+200    	; 0x172c <main+0x87e>
	else if (__tmp > 65535)
    1664:	fe 01       	movw	r30, r28
    1666:	e0 5b       	subi	r30, 0xB0	; 176
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	60 81       	ld	r22, Z
    166c:	71 81       	ldd	r23, Z+1	; 0x01
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	93 81       	ldd	r25, Z+3	; 0x03
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	3f ef       	ldi	r19, 0xFF	; 255
    1676:	4f e7       	ldi	r20, 0x7F	; 127
    1678:	57 e4       	ldi	r21, 0x47	; 71
    167a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    167e:	18 16       	cp	r1, r24
    1680:	0c f0       	brlt	.+2      	; 0x1684 <main+0x7d6>
    1682:	43 c0       	rjmp	.+134    	; 0x170a <main+0x85c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1684:	fe 01       	movw	r30, r28
    1686:	ec 5a       	subi	r30, 0xAC	; 172
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	60 81       	ld	r22, Z
    168c:	71 81       	ldd	r23, Z+1	; 0x01
    168e:	82 81       	ldd	r24, Z+2	; 0x02
    1690:	93 81       	ldd	r25, Z+3	; 0x03
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e2       	ldi	r20, 0x20	; 32
    1698:	51 e4       	ldi	r21, 0x41	; 65
    169a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	8e 01       	movw	r16, r28
    16a4:	02 5b       	subi	r16, 0xB2	; 178
    16a6:	1f 4f       	sbci	r17, 0xFF	; 255
    16a8:	bc 01       	movw	r22, r24
    16aa:	cd 01       	movw	r24, r26
    16ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	f8 01       	movw	r30, r16
    16b6:	91 83       	std	Z+1, r25	; 0x01
    16b8:	80 83       	st	Z, r24
    16ba:	1f c0       	rjmp	.+62     	; 0x16fa <main+0x84c>
    16bc:	fe 01       	movw	r30, r28
    16be:	e4 5b       	subi	r30, 0xB4	; 180
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	89 e1       	ldi	r24, 0x19	; 25
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	91 83       	std	Z+1, r25	; 0x01
    16c8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16ca:	fe 01       	movw	r30, r28
    16cc:	e4 5b       	subi	r30, 0xB4	; 180
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	80 81       	ld	r24, Z
    16d2:	91 81       	ldd	r25, Z+1	; 0x01
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	f1 f7       	brne	.-4      	; 0x16d4 <main+0x826>
    16d8:	fe 01       	movw	r30, r28
    16da:	e4 5b       	subi	r30, 0xB4	; 180
    16dc:	ff 4f       	sbci	r31, 0xFF	; 255
    16de:	91 83       	std	Z+1, r25	; 0x01
    16e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e2:	de 01       	movw	r26, r28
    16e4:	a2 5b       	subi	r26, 0xB2	; 178
    16e6:	bf 4f       	sbci	r27, 0xFF	; 255
    16e8:	fe 01       	movw	r30, r28
    16ea:	e2 5b       	subi	r30, 0xB2	; 178
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	80 81       	ld	r24, Z
    16f0:	91 81       	ldd	r25, Z+1	; 0x01
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	11 96       	adiw	r26, 0x01	; 1
    16f6:	9c 93       	st	X, r25
    16f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fa:	fe 01       	movw	r30, r28
    16fc:	e2 5b       	subi	r30, 0xB2	; 178
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	80 81       	ld	r24, Z
    1702:	91 81       	ldd	r25, Z+1	; 0x01
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	d1 f6       	brne	.-76     	; 0x16bc <main+0x80e>
    1708:	4b c0       	rjmp	.+150    	; 0x17a0 <main+0x8f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    170a:	8e 01       	movw	r16, r28
    170c:	02 5b       	subi	r16, 0xB2	; 178
    170e:	1f 4f       	sbci	r17, 0xFF	; 255
    1710:	fe 01       	movw	r30, r28
    1712:	e0 5b       	subi	r30, 0xB0	; 176
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	60 81       	ld	r22, Z
    1718:	71 81       	ldd	r23, Z+1	; 0x01
    171a:	82 81       	ldd	r24, Z+2	; 0x02
    171c:	93 81       	ldd	r25, Z+3	; 0x03
    171e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	f8 01       	movw	r30, r16
    1728:	91 83       	std	Z+1, r25	; 0x01
    172a:	80 83       	st	Z, r24
    172c:	de 01       	movw	r26, r28
    172e:	a6 5b       	subi	r26, 0xB6	; 182
    1730:	bf 4f       	sbci	r27, 0xFF	; 255
    1732:	fe 01       	movw	r30, r28
    1734:	e2 5b       	subi	r30, 0xB2	; 178
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	80 81       	ld	r24, Z
    173a:	91 81       	ldd	r25, Z+1	; 0x01
    173c:	11 96       	adiw	r26, 0x01	; 1
    173e:	9c 93       	st	X, r25
    1740:	8e 93       	st	-X, r24
    1742:	fe 01       	movw	r30, r28
    1744:	e6 5b       	subi	r30, 0xB6	; 182
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	80 81       	ld	r24, Z
    174a:	91 81       	ldd	r25, Z+1	; 0x01
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <main+0x89e>
    1750:	fe 01       	movw	r30, r28
    1752:	e6 5b       	subi	r30, 0xB6	; 182
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	91 83       	std	Z+1, r25	; 0x01
    1758:	80 83       	st	Z, r24
    175a:	22 c0       	rjmp	.+68     	; 0x17a0 <main+0x8f2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    175c:	8e 01       	movw	r16, r28
    175e:	08 5a       	subi	r16, 0xA8	; 168
    1760:	1f 4f       	sbci	r17, 0xFF	; 255
    1762:	fe 01       	movw	r30, r28
    1764:	e7 5a       	subi	r30, 0xA7	; 167
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	60 81       	ld	r22, Z
    176a:	71 81       	ldd	r23, Z+1	; 0x01
    176c:	82 81       	ldd	r24, Z+2	; 0x02
    176e:	93 81       	ldd	r25, Z+3	; 0x03
    1770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	f8 01       	movw	r30, r16
    177a:	80 83       	st	Z, r24
    177c:	de 01       	movw	r26, r28
    177e:	a7 5b       	subi	r26, 0xB7	; 183
    1780:	bf 4f       	sbci	r27, 0xFF	; 255
    1782:	fe 01       	movw	r30, r28
    1784:	e8 5a       	subi	r30, 0xA8	; 168
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	80 81       	ld	r24, Z
    178a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    178c:	fe 01       	movw	r30, r28
    178e:	e7 5b       	subi	r30, 0xB7	; 183
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	80 81       	ld	r24, Z
    1794:	8a 95       	dec	r24
    1796:	f1 f7       	brne	.-4      	; 0x1794 <main+0x8e6>
    1798:	fe 01       	movw	r30, r28
    179a:	e7 5b       	subi	r30, 0xB7	; 183
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	80 83       	st	Z, r24
		_delay_us(1);
		PORTA=PORTA & 0xC0;
    17a0:	ab e3       	ldi	r26, 0x3B	; 59
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	eb e3       	ldi	r30, 0x3B	; 59
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	80 7c       	andi	r24, 0xC0	; 192
    17ac:	8c 93       	st	X, r24

		// display the minute
		PORTC=(PORTC & 0xF0) | (minute%10);
    17ae:	a5 e3       	ldi	r26, 0x35	; 53
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e5 e3       	ldi	r30, 0x35	; 53
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	28 2f       	mov	r18, r24
    17ba:	20 7f       	andi	r18, 0xF0	; 240
    17bc:	80 91 71 00 	lds	r24, 0x0071
    17c0:	9a e0       	ldi	r25, 0x0A	; 10
    17c2:	69 2f       	mov	r22, r25
    17c4:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__udivmodqi4>
    17c8:	89 2f       	mov	r24, r25
    17ca:	82 2b       	or	r24, r18
    17cc:	8c 93       	st	X, r24
		PORTA=(PORTA & 0xC0)|(1<<3);
    17ce:	ab e3       	ldi	r26, 0x3B	; 59
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	eb e3       	ldi	r30, 0x3B	; 59
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	80 7c       	andi	r24, 0xC0	; 192
    17da:	88 60       	ori	r24, 0x08	; 8
    17dc:	8c 93       	st	X, r24
    17de:	fe 01       	movw	r30, r28
    17e0:	eb 5b       	subi	r30, 0xBB	; 187
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	a0 e8       	ldi	r26, 0x80	; 128
    17ea:	bf e3       	ldi	r27, 0x3F	; 63
    17ec:	80 83       	st	Z, r24
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	a2 83       	std	Z+2, r26	; 0x02
    17f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17f4:	8e 01       	movw	r16, r28
    17f6:	0f 5b       	subi	r16, 0xBF	; 191
    17f8:	1f 4f       	sbci	r17, 0xFF	; 255
    17fa:	fe 01       	movw	r30, r28
    17fc:	eb 5b       	subi	r30, 0xBB	; 187
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	60 81       	ld	r22, Z
    1802:	71 81       	ldd	r23, Z+1	; 0x01
    1804:	82 81       	ldd	r24, Z+2	; 0x02
    1806:	93 81       	ldd	r25, Z+3	; 0x03
    1808:	2b ea       	ldi	r18, 0xAB	; 171
    180a:	3a ea       	ldi	r19, 0xAA	; 170
    180c:	4a ea       	ldi	r20, 0xAA	; 170
    180e:	5e e3       	ldi	r21, 0x3E	; 62
    1810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	f8 01       	movw	r30, r16
    181a:	80 83       	st	Z, r24
    181c:	91 83       	std	Z+1, r25	; 0x01
    181e:	a2 83       	std	Z+2, r26	; 0x02
    1820:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1822:	fe 01       	movw	r30, r28
    1824:	ef 5b       	subi	r30, 0xBF	; 191
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	60 81       	ld	r22, Z
    182a:	71 81       	ldd	r23, Z+1	; 0x01
    182c:	82 81       	ldd	r24, Z+2	; 0x02
    182e:	93 81       	ldd	r25, Z+3	; 0x03
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e8       	ldi	r20, 0x80	; 128
    1836:	5f e3       	ldi	r21, 0x3F	; 63
    1838:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    183c:	88 23       	and	r24, r24
    183e:	34 f4       	brge	.+12     	; 0x184c <main+0x99e>
		__ticks = 1;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	fe 01       	movw	r30, r28
    1844:	e0 5c       	subi	r30, 0xC0	; 192
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	80 83       	st	Z, r24
    184a:	9d c0       	rjmp	.+314    	; 0x1986 <main+0xad8>
	else if (__tmp > 255)
    184c:	fe 01       	movw	r30, r28
    184e:	ef 5b       	subi	r30, 0xBF	; 191
    1850:	ff 4f       	sbci	r31, 0xFF	; 255
    1852:	60 81       	ld	r22, Z
    1854:	71 81       	ldd	r23, Z+1	; 0x01
    1856:	82 81       	ldd	r24, Z+2	; 0x02
    1858:	93 81       	ldd	r25, Z+3	; 0x03
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	4f e7       	ldi	r20, 0x7F	; 127
    1860:	53 e4       	ldi	r21, 0x43	; 67
    1862:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1866:	18 16       	cp	r1, r24
    1868:	0c f0       	brlt	.+2      	; 0x186c <main+0x9be>
    186a:	7e c0       	rjmp	.+252    	; 0x1968 <main+0xaba>
	{
		_delay_ms(__us / 1000.0);
    186c:	fe 01       	movw	r30, r28
    186e:	eb 5b       	subi	r30, 0xBB	; 187
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	60 81       	ld	r22, Z
    1874:	71 81       	ldd	r23, Z+1	; 0x01
    1876:	82 81       	ldd	r24, Z+2	; 0x02
    1878:	93 81       	ldd	r25, Z+3	; 0x03
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	4a e7       	ldi	r20, 0x7A	; 122
    1880:	54 e4       	ldi	r21, 0x44	; 68
    1882:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	8c af       	std	Y+60, r24	; 0x3c
    188c:	9d af       	std	Y+61, r25	; 0x3d
    188e:	ae af       	std	Y+62, r26	; 0x3e
    1890:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1892:	6c ad       	ldd	r22, Y+60	; 0x3c
    1894:	7d ad       	ldd	r23, Y+61	; 0x3d
    1896:	8e ad       	ldd	r24, Y+62	; 0x3e
    1898:	9f ad       	ldd	r25, Y+63	; 0x3f
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	4a e7       	ldi	r20, 0x7A	; 122
    18a0:	53 e4       	ldi	r21, 0x43	; 67
    18a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	88 af       	std	Y+56, r24	; 0x38
    18ac:	99 af       	std	Y+57, r25	; 0x39
    18ae:	aa af       	std	Y+58, r26	; 0x3a
    18b0:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    18b2:	68 ad       	ldd	r22, Y+56	; 0x38
    18b4:	79 ad       	ldd	r23, Y+57	; 0x39
    18b6:	8a ad       	ldd	r24, Y+58	; 0x3a
    18b8:	9b ad       	ldd	r25, Y+59	; 0x3b
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18c6:	88 23       	and	r24, r24
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <main+0xa26>
		__ticks = 1;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	9f ab       	std	Y+55, r25	; 0x37
    18d0:	8e ab       	std	Y+54, r24	; 0x36
    18d2:	3f c0       	rjmp	.+126    	; 0x1952 <main+0xaa4>
	else if (__tmp > 65535)
    18d4:	68 ad       	ldd	r22, Y+56	; 0x38
    18d6:	79 ad       	ldd	r23, Y+57	; 0x39
    18d8:	8a ad       	ldd	r24, Y+58	; 0x3a
    18da:	9b ad       	ldd	r25, Y+59	; 0x3b
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	3f ef       	ldi	r19, 0xFF	; 255
    18e0:	4f e7       	ldi	r20, 0x7F	; 127
    18e2:	57 e4       	ldi	r21, 0x47	; 71
    18e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18e8:	18 16       	cp	r1, r24
    18ea:	4c f5       	brge	.+82     	; 0x193e <main+0xa90>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ec:	6c ad       	ldd	r22, Y+60	; 0x3c
    18ee:	7d ad       	ldd	r23, Y+61	; 0x3d
    18f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    18f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	51 e4       	ldi	r21, 0x41	; 65
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	9f ab       	std	Y+55, r25	; 0x37
    1912:	8e ab       	std	Y+54, r24	; 0x36
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <main+0xa86>
    1916:	89 e1       	ldi	r24, 0x19	; 25
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	9d ab       	std	Y+53, r25	; 0x35
    191c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    191e:	8c a9       	ldd	r24, Y+52	; 0x34
    1920:	9d a9       	ldd	r25, Y+53	; 0x35
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <main+0xa74>
    1926:	9d ab       	std	Y+53, r25	; 0x35
    1928:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192a:	8e a9       	ldd	r24, Y+54	; 0x36
    192c:	9f a9       	ldd	r25, Y+55	; 0x37
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	9f ab       	std	Y+55, r25	; 0x37
    1932:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1934:	8e a9       	ldd	r24, Y+54	; 0x36
    1936:	9f a9       	ldd	r25, Y+55	; 0x37
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	69 f7       	brne	.-38     	; 0x1916 <main+0xa68>
    193c:	2d c0       	rjmp	.+90     	; 0x1998 <main+0xaea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193e:	68 ad       	ldd	r22, Y+56	; 0x38
    1940:	79 ad       	ldd	r23, Y+57	; 0x39
    1942:	8a ad       	ldd	r24, Y+58	; 0x3a
    1944:	9b ad       	ldd	r25, Y+59	; 0x3b
    1946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	9f ab       	std	Y+55, r25	; 0x37
    1950:	8e ab       	std	Y+54, r24	; 0x36
    1952:	8e a9       	ldd	r24, Y+54	; 0x36
    1954:	9f a9       	ldd	r25, Y+55	; 0x37
    1956:	9b ab       	std	Y+51, r25	; 0x33
    1958:	8a ab       	std	Y+50, r24	; 0x32
    195a:	8a a9       	ldd	r24, Y+50	; 0x32
    195c:	9b a9       	ldd	r25, Y+51	; 0x33
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <main+0xab0>
    1962:	9b ab       	std	Y+51, r25	; 0x33
    1964:	8a ab       	std	Y+50, r24	; 0x32
    1966:	18 c0       	rjmp	.+48     	; 0x1998 <main+0xaea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1968:	fe 01       	movw	r30, r28
    196a:	ef 5b       	subi	r30, 0xBF	; 191
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	60 81       	ld	r22, Z
    1970:	71 81       	ldd	r23, Z+1	; 0x01
    1972:	82 81       	ldd	r24, Z+2	; 0x02
    1974:	93 81       	ldd	r25, Z+3	; 0x03
    1976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	fe 01       	movw	r30, r28
    1980:	e0 5c       	subi	r30, 0xC0	; 192
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	80 83       	st	Z, r24
    1986:	fe 01       	movw	r30, r28
    1988:	e0 5c       	subi	r30, 0xC0	; 192
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	80 81       	ld	r24, Z
    198e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1990:	89 a9       	ldd	r24, Y+49	; 0x31
    1992:	8a 95       	dec	r24
    1994:	f1 f7       	brne	.-4      	; 0x1992 <main+0xae4>
    1996:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(1);
		PORTA=PORTA & 0xC0;
    1998:	ab e3       	ldi	r26, 0x3B	; 59
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	eb e3       	ldi	r30, 0x3B	; 59
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	80 7c       	andi	r24, 0xC0	; 192
    19a4:	8c 93       	st	X, r24

		// display the second
		PORTC=(PORTC & 0xF0) | ((second-(second%10))/10);
    19a6:	05 e3       	ldi	r16, 0x35	; 53
    19a8:	10 e0       	ldi	r17, 0x00	; 0
    19aa:	e5 e3       	ldi	r30, 0x35	; 53
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	48 2f       	mov	r20, r24
    19b2:	40 7f       	andi	r20, 0xF0	; 240
    19b4:	80 91 70 00 	lds	r24, 0x0070
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	80 91 70 00 	lds	r24, 0x0070
    19c0:	9a e0       	ldi	r25, 0x0A	; 10
    19c2:	69 2f       	mov	r22, r25
    19c4:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__udivmodqi4>
    19c8:	89 2f       	mov	r24, r25
    19ca:	88 2f       	mov	r24, r24
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	b9 01       	movw	r22, r18
    19d0:	68 1b       	sub	r22, r24
    19d2:	79 0b       	sbc	r23, r25
    19d4:	cb 01       	movw	r24, r22
    19d6:	2a e0       	ldi	r18, 0x0A	; 10
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	b9 01       	movw	r22, r18
    19dc:	0e 94 5f 11 	call	0x22be	; 0x22be <__divmodhi4>
    19e0:	cb 01       	movw	r24, r22
    19e2:	84 2b       	or	r24, r20
    19e4:	f8 01       	movw	r30, r16
    19e6:	80 83       	st	Z, r24
		PORTA=(PORTA & 0xC0)|(1<<4);
    19e8:	ab e3       	ldi	r26, 0x3B	; 59
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	eb e3       	ldi	r30, 0x3B	; 59
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	80 7c       	andi	r24, 0xC0	; 192
    19f4:	80 61       	ori	r24, 0x10	; 16
    19f6:	8c 93       	st	X, r24
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	a0 e8       	ldi	r26, 0x80	; 128
    19fe:	bf e3       	ldi	r27, 0x3F	; 63
    1a00:	8d a7       	std	Y+45, r24	; 0x2d
    1a02:	9e a7       	std	Y+46, r25	; 0x2e
    1a04:	af a7       	std	Y+47, r26	; 0x2f
    1a06:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a08:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a0a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a10:	2b ea       	ldi	r18, 0xAB	; 171
    1a12:	3a ea       	ldi	r19, 0xAA	; 170
    1a14:	4a ea       	ldi	r20, 0xAA	; 170
    1a16:	5e e3       	ldi	r21, 0x3E	; 62
    1a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	89 a7       	std	Y+41, r24	; 0x29
    1a22:	9a a7       	std	Y+42, r25	; 0x2a
    1a24:	ab a7       	std	Y+43, r26	; 0x2b
    1a26:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1a28:	69 a5       	ldd	r22, Y+41	; 0x29
    1a2a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e8       	ldi	r20, 0x80	; 128
    1a36:	5f e3       	ldi	r21, 0x3F	; 63
    1a38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a3c:	88 23       	and	r24, r24
    1a3e:	1c f4       	brge	.+6      	; 0x1a46 <main+0xb98>
		__ticks = 1;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	88 a7       	std	Y+40, r24	; 0x28
    1a44:	91 c0       	rjmp	.+290    	; 0x1b68 <main+0xcba>
	else if (__tmp > 255)
    1a46:	69 a5       	ldd	r22, Y+41	; 0x29
    1a48:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a4c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	4f e7       	ldi	r20, 0x7F	; 127
    1a54:	53 e4       	ldi	r21, 0x43	; 67
    1a56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a5a:	18 16       	cp	r1, r24
    1a5c:	0c f0       	brlt	.+2      	; 0x1a60 <main+0xbb2>
    1a5e:	7b c0       	rjmp	.+246    	; 0x1b56 <main+0xca8>
	{
		_delay_ms(__us / 1000.0);
    1a60:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a62:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a66:	98 a9       	ldd	r25, Y+48	; 0x30
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	4a e7       	ldi	r20, 0x7A	; 122
    1a6e:	54 e4       	ldi	r21, 0x44	; 68
    1a70:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	8c a3       	std	Y+36, r24	; 0x24
    1a7a:	9d a3       	std	Y+37, r25	; 0x25
    1a7c:	ae a3       	std	Y+38, r26	; 0x26
    1a7e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a80:	6c a1       	ldd	r22, Y+36	; 0x24
    1a82:	7d a1       	ldd	r23, Y+37	; 0x25
    1a84:	8e a1       	ldd	r24, Y+38	; 0x26
    1a86:	9f a1       	ldd	r25, Y+39	; 0x27
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	4a e7       	ldi	r20, 0x7A	; 122
    1a8e:	53 e4       	ldi	r21, 0x43	; 67
    1a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	88 a3       	std	Y+32, r24	; 0x20
    1a9a:	99 a3       	std	Y+33, r25	; 0x21
    1a9c:	aa a3       	std	Y+34, r26	; 0x22
    1a9e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1aa0:	68 a1       	ldd	r22, Y+32	; 0x20
    1aa2:	79 a1       	ldd	r23, Y+33	; 0x21
    1aa4:	8a a1       	ldd	r24, Y+34	; 0x22
    1aa6:	9b a1       	ldd	r25, Y+35	; 0x23
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	40 e8       	ldi	r20, 0x80	; 128
    1aae:	5f e3       	ldi	r21, 0x3F	; 63
    1ab0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ab4:	88 23       	and	r24, r24
    1ab6:	2c f4       	brge	.+10     	; 0x1ac2 <main+0xc14>
		__ticks = 1;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9f 8f       	std	Y+31, r25	; 0x1f
    1abe:	8e 8f       	std	Y+30, r24	; 0x1e
    1ac0:	3f c0       	rjmp	.+126    	; 0x1b40 <main+0xc92>
	else if (__tmp > 65535)
    1ac2:	68 a1       	ldd	r22, Y+32	; 0x20
    1ac4:	79 a1       	ldd	r23, Y+33	; 0x21
    1ac6:	8a a1       	ldd	r24, Y+34	; 0x22
    1ac8:	9b a1       	ldd	r25, Y+35	; 0x23
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	3f ef       	ldi	r19, 0xFF	; 255
    1ace:	4f e7       	ldi	r20, 0x7F	; 127
    1ad0:	57 e4       	ldi	r21, 0x47	; 71
    1ad2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ad6:	18 16       	cp	r1, r24
    1ad8:	4c f5       	brge	.+82     	; 0x1b2c <main+0xc7e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ada:	6c a1       	ldd	r22, Y+36	; 0x24
    1adc:	7d a1       	ldd	r23, Y+37	; 0x25
    1ade:	8e a1       	ldd	r24, Y+38	; 0x26
    1ae0:	9f a1       	ldd	r25, Y+39	; 0x27
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e2       	ldi	r20, 0x20	; 32
    1ae8:	51 e4       	ldi	r21, 0x41	; 65
    1aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	bc 01       	movw	r22, r24
    1af4:	cd 01       	movw	r24, r26
    1af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	9f 8f       	std	Y+31, r25	; 0x1f
    1b00:	8e 8f       	std	Y+30, r24	; 0x1e
    1b02:	0f c0       	rjmp	.+30     	; 0x1b22 <main+0xc74>
    1b04:	89 e1       	ldi	r24, 0x19	; 25
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	9d 8f       	std	Y+29, r25	; 0x1d
    1b0a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b0e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <main+0xc62>
    1b14:	9d 8f       	std	Y+29, r25	; 0x1d
    1b16:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b18:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b1a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	9f 8f       	std	Y+31, r25	; 0x1f
    1b20:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b24:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	69 f7       	brne	.-38     	; 0x1b04 <main+0xc56>
    1b2a:	24 c0       	rjmp	.+72     	; 0x1b74 <main+0xcc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2c:	68 a1       	ldd	r22, Y+32	; 0x20
    1b2e:	79 a1       	ldd	r23, Y+33	; 0x21
    1b30:	8a a1       	ldd	r24, Y+34	; 0x22
    1b32:	9b a1       	ldd	r25, Y+35	; 0x23
    1b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	9f 8f       	std	Y+31, r25	; 0x1f
    1b3e:	8e 8f       	std	Y+30, r24	; 0x1e
    1b40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b42:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b44:	9b 8f       	std	Y+27, r25	; 0x1b
    1b46:	8a 8f       	std	Y+26, r24	; 0x1a
    1b48:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b4a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	f1 f7       	brne	.-4      	; 0x1b4c <main+0xc9e>
    1b50:	9b 8f       	std	Y+27, r25	; 0x1b
    1b52:	8a 8f       	std	Y+26, r24	; 0x1a
    1b54:	0f c0       	rjmp	.+30     	; 0x1b74 <main+0xcc6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b56:	69 a5       	ldd	r22, Y+41	; 0x29
    1b58:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b5a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b5c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	88 a7       	std	Y+40, r24	; 0x28
    1b68:	88 a5       	ldd	r24, Y+40	; 0x28
    1b6a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b6c:	89 8d       	ldd	r24, Y+25	; 0x19
    1b6e:	8a 95       	dec	r24
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <main+0xcc0>
    1b72:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(1);
		PORTA=PORTA & 0xC0;
    1b74:	ab e3       	ldi	r26, 0x3B	; 59
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	eb e3       	ldi	r30, 0x3B	; 59
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	80 7c       	andi	r24, 0xC0	; 192
    1b80:	8c 93       	st	X, r24

		// display the second
		PORTC=(PORTC & 0xF0) | (second%10);
    1b82:	a5 e3       	ldi	r26, 0x35	; 53
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e5 e3       	ldi	r30, 0x35	; 53
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	20 7f       	andi	r18, 0xF0	; 240
    1b90:	80 91 70 00 	lds	r24, 0x0070
    1b94:	9a e0       	ldi	r25, 0x0A	; 10
    1b96:	69 2f       	mov	r22, r25
    1b98:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__udivmodqi4>
    1b9c:	89 2f       	mov	r24, r25
    1b9e:	82 2b       	or	r24, r18
    1ba0:	8c 93       	st	X, r24
		PORTA=(PORTA & 0xC0)|(1<<5);
    1ba2:	ab e3       	ldi	r26, 0x3B	; 59
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	eb e3       	ldi	r30, 0x3B	; 59
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	80 7c       	andi	r24, 0xC0	; 192
    1bae:	80 62       	ori	r24, 0x20	; 32
    1bb0:	8c 93       	st	X, r24
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	a0 e8       	ldi	r26, 0x80	; 128
    1bb8:	bf e3       	ldi	r27, 0x3F	; 63
    1bba:	8d 8b       	std	Y+21, r24	; 0x15
    1bbc:	9e 8b       	std	Y+22, r25	; 0x16
    1bbe:	af 8b       	std	Y+23, r26	; 0x17
    1bc0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bca:	2b ea       	ldi	r18, 0xAB	; 171
    1bcc:	3a ea       	ldi	r19, 0xAA	; 170
    1bce:	4a ea       	ldi	r20, 0xAA	; 170
    1bd0:	5e e3       	ldi	r21, 0x3E	; 62
    1bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	89 8b       	std	Y+17, r24	; 0x11
    1bdc:	9a 8b       	std	Y+18, r25	; 0x12
    1bde:	ab 8b       	std	Y+19, r26	; 0x13
    1be0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1be2:	69 89       	ldd	r22, Y+17	; 0x11
    1be4:	7a 89       	ldd	r23, Y+18	; 0x12
    1be6:	8b 89       	ldd	r24, Y+19	; 0x13
    1be8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e8       	ldi	r20, 0x80	; 128
    1bf0:	5f e3       	ldi	r21, 0x3F	; 63
    1bf2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bf6:	88 23       	and	r24, r24
    1bf8:	1c f4       	brge	.+6      	; 0x1c00 <main+0xd52>
		__ticks = 1;
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	88 8b       	std	Y+16, r24	; 0x10
    1bfe:	91 c0       	rjmp	.+290    	; 0x1d22 <main+0xe74>
	else if (__tmp > 255)
    1c00:	69 89       	ldd	r22, Y+17	; 0x11
    1c02:	7a 89       	ldd	r23, Y+18	; 0x12
    1c04:	8b 89       	ldd	r24, Y+19	; 0x13
    1c06:	9c 89       	ldd	r25, Y+20	; 0x14
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	4f e7       	ldi	r20, 0x7F	; 127
    1c0e:	53 e4       	ldi	r21, 0x43	; 67
    1c10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c14:	18 16       	cp	r1, r24
    1c16:	0c f0       	brlt	.+2      	; 0x1c1a <main+0xd6c>
    1c18:	7b c0       	rjmp	.+246    	; 0x1d10 <main+0xe62>
	{
		_delay_ms(__us / 1000.0);
    1c1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c20:	98 8d       	ldd	r25, Y+24	; 0x18
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	4a e7       	ldi	r20, 0x7A	; 122
    1c28:	54 e4       	ldi	r21, 0x44	; 68
    1c2a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	8c 87       	std	Y+12, r24	; 0x0c
    1c34:	9d 87       	std	Y+13, r25	; 0x0d
    1c36:	ae 87       	std	Y+14, r26	; 0x0e
    1c38:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c3c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c3e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c40:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	4a e7       	ldi	r20, 0x7A	; 122
    1c48:	53 e4       	ldi	r21, 0x43	; 67
    1c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	88 87       	std	Y+8, r24	; 0x08
    1c54:	99 87       	std	Y+9, r25	; 0x09
    1c56:	aa 87       	std	Y+10, r26	; 0x0a
    1c58:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1c5a:	68 85       	ldd	r22, Y+8	; 0x08
    1c5c:	79 85       	ldd	r23, Y+9	; 0x09
    1c5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c60:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e8       	ldi	r20, 0x80	; 128
    1c68:	5f e3       	ldi	r21, 0x3F	; 63
    1c6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c6e:	88 23       	and	r24, r24
    1c70:	2c f4       	brge	.+10     	; 0x1c7c <main+0xdce>
		__ticks = 1;
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	9f 83       	std	Y+7, r25	; 0x07
    1c78:	8e 83       	std	Y+6, r24	; 0x06
    1c7a:	3f c0       	rjmp	.+126    	; 0x1cfa <main+0xe4c>
	else if (__tmp > 65535)
    1c7c:	68 85       	ldd	r22, Y+8	; 0x08
    1c7e:	79 85       	ldd	r23, Y+9	; 0x09
    1c80:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c82:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	3f ef       	ldi	r19, 0xFF	; 255
    1c88:	4f e7       	ldi	r20, 0x7F	; 127
    1c8a:	57 e4       	ldi	r21, 0x47	; 71
    1c8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c90:	18 16       	cp	r1, r24
    1c92:	4c f5       	brge	.+82     	; 0x1ce6 <main+0xe38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c94:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c96:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c98:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c9a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e2       	ldi	r20, 0x20	; 32
    1ca2:	51 e4       	ldi	r21, 0x41	; 65
    1ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	bc 01       	movw	r22, r24
    1cae:	cd 01       	movw	r24, r26
    1cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	9f 83       	std	Y+7, r25	; 0x07
    1cba:	8e 83       	std	Y+6, r24	; 0x06
    1cbc:	0f c0       	rjmp	.+30     	; 0x1cdc <main+0xe2e>
    1cbe:	89 e1       	ldi	r24, 0x19	; 25
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	9d 83       	std	Y+5, r25	; 0x05
    1cc4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <main+0xe1c>
    1cce:	9d 83       	std	Y+5, r25	; 0x05
    1cd0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd4:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	9f 83       	std	Y+7, r25	; 0x07
    1cda:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cdc:	8e 81       	ldd	r24, Y+6	; 0x06
    1cde:	9f 81       	ldd	r25, Y+7	; 0x07
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	69 f7       	brne	.-38     	; 0x1cbe <main+0xe10>
    1ce4:	24 c0       	rjmp	.+72     	; 0x1d2e <main+0xe80>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce6:	68 85       	ldd	r22, Y+8	; 0x08
    1ce8:	79 85       	ldd	r23, Y+9	; 0x09
    1cea:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cec:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	9f 83       	std	Y+7, r25	; 0x07
    1cf8:	8e 83       	std	Y+6, r24	; 0x06
    1cfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cfe:	9b 83       	std	Y+3, r25	; 0x03
    1d00:	8a 83       	std	Y+2, r24	; 0x02
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	9b 81       	ldd	r25, Y+3	; 0x03
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <main+0xe58>
    1d0a:	9b 83       	std	Y+3, r25	; 0x03
    1d0c:	8a 83       	std	Y+2, r24	; 0x02
    1d0e:	0f c0       	rjmp	.+30     	; 0x1d2e <main+0xe80>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d10:	69 89       	ldd	r22, Y+17	; 0x11
    1d12:	7a 89       	ldd	r23, Y+18	; 0x12
    1d14:	8b 89       	ldd	r24, Y+19	; 0x13
    1d16:	9c 89       	ldd	r25, Y+20	; 0x14
    1d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	88 8b       	std	Y+16, r24	; 0x10
    1d22:	88 89       	ldd	r24, Y+16	; 0x10
    1d24:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	8a 95       	dec	r24
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <main+0xe7a>
    1d2c:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		PORTA=PORTA & 0xC0;
    1d2e:	ab e3       	ldi	r26, 0x3B	; 59
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	eb e3       	ldi	r30, 0x3B	; 59
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	80 7c       	andi	r24, 0xC0	; 192
    1d3a:	8c 93       	st	X, r24
    1d3c:	3e c9       	rjmp	.-3460   	; 0xfba <main+0x10c>

00001d3e <__vector_9>:
static volatile void (*g_timer0CallBackPtr)(void)=NULL_PTR;
static volatile void (*g_timer1CallBackPtr)(void)=NULL_PTR;
static volatile void (*g_timer2CallBackPtr)(void)=NULL_PTR;


ISR(TIMER0_OVF_vect){
    1d3e:	1f 92       	push	r1
    1d40:	0f 92       	push	r0
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	0f 92       	push	r0
    1d46:	11 24       	eor	r1, r1
    1d48:	2f 93       	push	r18
    1d4a:	3f 93       	push	r19
    1d4c:	4f 93       	push	r20
    1d4e:	5f 93       	push	r21
    1d50:	6f 93       	push	r22
    1d52:	7f 93       	push	r23
    1d54:	8f 93       	push	r24
    1d56:	9f 93       	push	r25
    1d58:	af 93       	push	r26
    1d5a:	bf 93       	push	r27
    1d5c:	ef 93       	push	r30
    1d5e:	ff 93       	push	r31
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR){
    1d68:	80 91 73 00 	lds	r24, 0x0073
    1d6c:	90 91 74 00 	lds	r25, 0x0074
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	29 f0       	breq	.+10     	; 0x1d7e <__vector_9+0x40>
		(*g_timer0CallBackPtr)();
    1d74:	e0 91 73 00 	lds	r30, 0x0073
    1d78:	f0 91 74 00 	lds	r31, 0x0074
    1d7c:	09 95       	icall
	}
}
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	ff 91       	pop	r31
    1d84:	ef 91       	pop	r30
    1d86:	bf 91       	pop	r27
    1d88:	af 91       	pop	r26
    1d8a:	9f 91       	pop	r25
    1d8c:	8f 91       	pop	r24
    1d8e:	7f 91       	pop	r23
    1d90:	6f 91       	pop	r22
    1d92:	5f 91       	pop	r21
    1d94:	4f 91       	pop	r20
    1d96:	3f 91       	pop	r19
    1d98:	2f 91       	pop	r18
    1d9a:	0f 90       	pop	r0
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	0f 90       	pop	r0
    1da0:	1f 90       	pop	r1
    1da2:	18 95       	reti

00001da4 <__vector_19>:

ISR(TIMER0_COMP_vect){
    1da4:	1f 92       	push	r1
    1da6:	0f 92       	push	r0
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	0f 92       	push	r0
    1dac:	11 24       	eor	r1, r1
    1dae:	2f 93       	push	r18
    1db0:	3f 93       	push	r19
    1db2:	4f 93       	push	r20
    1db4:	5f 93       	push	r21
    1db6:	6f 93       	push	r22
    1db8:	7f 93       	push	r23
    1dba:	8f 93       	push	r24
    1dbc:	9f 93       	push	r25
    1dbe:	af 93       	push	r26
    1dc0:	bf 93       	push	r27
    1dc2:	ef 93       	push	r30
    1dc4:	ff 93       	push	r31
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR){
    1dce:	80 91 73 00 	lds	r24, 0x0073
    1dd2:	90 91 74 00 	lds	r25, 0x0074
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	29 f0       	breq	.+10     	; 0x1de4 <__vector_19+0x40>
		(*g_timer0CallBackPtr)();
    1dda:	e0 91 73 00 	lds	r30, 0x0073
    1dde:	f0 91 74 00 	lds	r31, 0x0074
    1de2:	09 95       	icall
	}
}
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	ff 91       	pop	r31
    1dea:	ef 91       	pop	r30
    1dec:	bf 91       	pop	r27
    1dee:	af 91       	pop	r26
    1df0:	9f 91       	pop	r25
    1df2:	8f 91       	pop	r24
    1df4:	7f 91       	pop	r23
    1df6:	6f 91       	pop	r22
    1df8:	5f 91       	pop	r21
    1dfa:	4f 91       	pop	r20
    1dfc:	3f 91       	pop	r19
    1dfe:	2f 91       	pop	r18
    1e00:	0f 90       	pop	r0
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	0f 90       	pop	r0
    1e06:	1f 90       	pop	r1
    1e08:	18 95       	reti

00001e0a <__vector_4>:

ISR(TIMER2_OVF_vect){
    1e0a:	1f 92       	push	r1
    1e0c:	0f 92       	push	r0
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	0f 92       	push	r0
    1e12:	11 24       	eor	r1, r1
    1e14:	2f 93       	push	r18
    1e16:	3f 93       	push	r19
    1e18:	4f 93       	push	r20
    1e1a:	5f 93       	push	r21
    1e1c:	6f 93       	push	r22
    1e1e:	7f 93       	push	r23
    1e20:	8f 93       	push	r24
    1e22:	9f 93       	push	r25
    1e24:	af 93       	push	r26
    1e26:	bf 93       	push	r27
    1e28:	ef 93       	push	r30
    1e2a:	ff 93       	push	r31
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2CallBackPtr != NULL_PTR){
    1e34:	80 91 77 00 	lds	r24, 0x0077
    1e38:	90 91 78 00 	lds	r25, 0x0078
    1e3c:	00 97       	sbiw	r24, 0x00	; 0
    1e3e:	29 f0       	breq	.+10     	; 0x1e4a <__vector_4+0x40>
		(*g_timer2CallBackPtr)();
    1e40:	e0 91 77 00 	lds	r30, 0x0077
    1e44:	f0 91 78 00 	lds	r31, 0x0078
    1e48:	09 95       	icall
	}
}
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	ff 91       	pop	r31
    1e50:	ef 91       	pop	r30
    1e52:	bf 91       	pop	r27
    1e54:	af 91       	pop	r26
    1e56:	9f 91       	pop	r25
    1e58:	8f 91       	pop	r24
    1e5a:	7f 91       	pop	r23
    1e5c:	6f 91       	pop	r22
    1e5e:	5f 91       	pop	r21
    1e60:	4f 91       	pop	r20
    1e62:	3f 91       	pop	r19
    1e64:	2f 91       	pop	r18
    1e66:	0f 90       	pop	r0
    1e68:	0f be       	out	0x3f, r0	; 63
    1e6a:	0f 90       	pop	r0
    1e6c:	1f 90       	pop	r1
    1e6e:	18 95       	reti

00001e70 <__vector_3>:

ISR(TIMER2_COMP_vect){
    1e70:	1f 92       	push	r1
    1e72:	0f 92       	push	r0
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	0f 92       	push	r0
    1e78:	11 24       	eor	r1, r1
    1e7a:	2f 93       	push	r18
    1e7c:	3f 93       	push	r19
    1e7e:	4f 93       	push	r20
    1e80:	5f 93       	push	r21
    1e82:	6f 93       	push	r22
    1e84:	7f 93       	push	r23
    1e86:	8f 93       	push	r24
    1e88:	9f 93       	push	r25
    1e8a:	af 93       	push	r26
    1e8c:	bf 93       	push	r27
    1e8e:	ef 93       	push	r30
    1e90:	ff 93       	push	r31
    1e92:	df 93       	push	r29
    1e94:	cf 93       	push	r28
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2CallBackPtr != NULL_PTR){
    1e9a:	80 91 77 00 	lds	r24, 0x0077
    1e9e:	90 91 78 00 	lds	r25, 0x0078
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	29 f0       	breq	.+10     	; 0x1eb0 <__vector_3+0x40>
		(*g_timer2CallBackPtr)();
    1ea6:	e0 91 77 00 	lds	r30, 0x0077
    1eaa:	f0 91 78 00 	lds	r31, 0x0078
    1eae:	09 95       	icall
	}
}
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	ff 91       	pop	r31
    1eb6:	ef 91       	pop	r30
    1eb8:	bf 91       	pop	r27
    1eba:	af 91       	pop	r26
    1ebc:	9f 91       	pop	r25
    1ebe:	8f 91       	pop	r24
    1ec0:	7f 91       	pop	r23
    1ec2:	6f 91       	pop	r22
    1ec4:	5f 91       	pop	r21
    1ec6:	4f 91       	pop	r20
    1ec8:	3f 91       	pop	r19
    1eca:	2f 91       	pop	r18
    1ecc:	0f 90       	pop	r0
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	0f 90       	pop	r0
    1ed2:	1f 90       	pop	r1
    1ed4:	18 95       	reti

00001ed6 <__vector_8>:

ISR(TIMER1_OVF_vect){
    1ed6:	1f 92       	push	r1
    1ed8:	0f 92       	push	r0
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	0f 92       	push	r0
    1ede:	11 24       	eor	r1, r1
    1ee0:	2f 93       	push	r18
    1ee2:	3f 93       	push	r19
    1ee4:	4f 93       	push	r20
    1ee6:	5f 93       	push	r21
    1ee8:	6f 93       	push	r22
    1eea:	7f 93       	push	r23
    1eec:	8f 93       	push	r24
    1eee:	9f 93       	push	r25
    1ef0:	af 93       	push	r26
    1ef2:	bf 93       	push	r27
    1ef4:	ef 93       	push	r30
    1ef6:	ff 93       	push	r31
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackPtr != NULL_PTR){
    1f00:	80 91 75 00 	lds	r24, 0x0075
    1f04:	90 91 76 00 	lds	r25, 0x0076
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	29 f0       	breq	.+10     	; 0x1f16 <__vector_8+0x40>
		(*g_timer1CallBackPtr)();
    1f0c:	e0 91 75 00 	lds	r30, 0x0075
    1f10:	f0 91 76 00 	lds	r31, 0x0076
    1f14:	09 95       	icall
	}
}
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	ff 91       	pop	r31
    1f1c:	ef 91       	pop	r30
    1f1e:	bf 91       	pop	r27
    1f20:	af 91       	pop	r26
    1f22:	9f 91       	pop	r25
    1f24:	8f 91       	pop	r24
    1f26:	7f 91       	pop	r23
    1f28:	6f 91       	pop	r22
    1f2a:	5f 91       	pop	r21
    1f2c:	4f 91       	pop	r20
    1f2e:	3f 91       	pop	r19
    1f30:	2f 91       	pop	r18
    1f32:	0f 90       	pop	r0
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	0f 90       	pop	r0
    1f38:	1f 90       	pop	r1
    1f3a:	18 95       	reti

00001f3c <__vector_6>:

ISR(TIMER1_COMPA_vect){
    1f3c:	1f 92       	push	r1
    1f3e:	0f 92       	push	r0
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	0f 92       	push	r0
    1f44:	11 24       	eor	r1, r1
    1f46:	2f 93       	push	r18
    1f48:	3f 93       	push	r19
    1f4a:	4f 93       	push	r20
    1f4c:	5f 93       	push	r21
    1f4e:	6f 93       	push	r22
    1f50:	7f 93       	push	r23
    1f52:	8f 93       	push	r24
    1f54:	9f 93       	push	r25
    1f56:	af 93       	push	r26
    1f58:	bf 93       	push	r27
    1f5a:	ef 93       	push	r30
    1f5c:	ff 93       	push	r31
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackPtr != NULL_PTR){
    1f66:	80 91 75 00 	lds	r24, 0x0075
    1f6a:	90 91 76 00 	lds	r25, 0x0076
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	29 f0       	breq	.+10     	; 0x1f7c <__vector_6+0x40>
		(*g_timer1CallBackPtr)();
    1f72:	e0 91 75 00 	lds	r30, 0x0075
    1f76:	f0 91 76 00 	lds	r31, 0x0076
    1f7a:	09 95       	icall
	}
}
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	ff 91       	pop	r31
    1f82:	ef 91       	pop	r30
    1f84:	bf 91       	pop	r27
    1f86:	af 91       	pop	r26
    1f88:	9f 91       	pop	r25
    1f8a:	8f 91       	pop	r24
    1f8c:	7f 91       	pop	r23
    1f8e:	6f 91       	pop	r22
    1f90:	5f 91       	pop	r21
    1f92:	4f 91       	pop	r20
    1f94:	3f 91       	pop	r19
    1f96:	2f 91       	pop	r18
    1f98:	0f 90       	pop	r0
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	0f 90       	pop	r0
    1f9e:	1f 90       	pop	r1
    1fa0:	18 95       	reti

00001fa2 <TIMER_init>:


void TIMER_init(const TIMER_configType *Config_Ptr){
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <TIMER_init+0x6>
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
    1fac:	9a 83       	std	Y+2, r25	; 0x02
    1fae:	89 83       	std	Y+1, r24	; 0x01
	/*In case of timer0*/
	if(Config_Ptr->timer_id == TIMER0){
    1fb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb4:	80 81       	ld	r24, Z
    1fb6:	88 23       	and	r24, r24
    1fb8:	09 f0       	breq	.+2      	; 0x1fbc <TIMER_init+0x1a>
    1fba:	4b c0       	rjmp	.+150    	; 0x2052 <TIMER_init+0xb0>
		TCCR0 = (1<<FOC0);
    1fbc:	e3 e5       	ldi	r30, 0x53	; 83
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 e8       	ldi	r24, 0x80	; 128
    1fc2:	80 83       	st	Z, r24
		 *Oring with the result  0B1011 0111
		 *                      -------------
		 *                       0B1011 1111
		 * and then, we adjust the mode of operation of the timer0
		 * */
		TCCR0 = (TCCR0 & 0xB7) | (Config_Ptr->mode<<2);
    1fc4:	a3 e5       	ldi	r26, 0x53	; 83
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e3 e5       	ldi	r30, 0x53	; 83
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	28 2f       	mov	r18, r24
    1fd0:	27 7b       	andi	r18, 0xB7	; 183
    1fd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd6:	81 81       	ldd	r24, Z+1	; 0x01
    1fd8:	88 2f       	mov	r24, r24
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	82 2b       	or	r24, r18
    1fe6:	8c 93       	st	X, r24
		/* The next line is to adjust the prescaler
		 * */
		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->prescaler);
    1fe8:	a3 e5       	ldi	r26, 0x53	; 83
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e3 e5       	ldi	r30, 0x53	; 83
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	98 2f       	mov	r25, r24
    1ff4:	98 7f       	andi	r25, 0xF8	; 248
    1ff6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff8:	fa 81       	ldd	r31, Y+2	; 0x02
    1ffa:	82 81       	ldd	r24, Z+2	; 0x02
    1ffc:	89 2b       	or	r24, r25
    1ffe:	8c 93       	st	X, r24
		/*The below line is for initial value of the timer register */
		TCNT0 = (uint8)(Config_Ptr->timerStartValue);
    2000:	a2 e5       	ldi	r26, 0x52	; 82
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e9 81       	ldd	r30, Y+1	; 0x01
    2006:	fa 81       	ldd	r31, Y+2	; 0x02
    2008:	84 81       	ldd	r24, Z+4	; 0x04
    200a:	95 81       	ldd	r25, Z+5	; 0x05
    200c:	8c 93       	st	X, r24
		/* In case of normal mode, this line is not important
		 * */
		OCR0  = (uint8)(Config_Ptr->compareValue);
    200e:	ac e5       	ldi	r26, 0x5C	; 92
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	e9 81       	ldd	r30, Y+1	; 0x01
    2014:	fa 81       	ldd	r31, Y+2	; 0x02
    2016:	86 81       	ldd	r24, Z+6	; 0x06
    2018:	97 81       	ldd	r25, Z+7	; 0x07
    201a:	8c 93       	st	X, r24
		/*Enabling the interrupt of overflow and compare mode in order to execute the ISR code*/
		if(Config_Ptr->mode == NORMAL_MODE){
    201c:	e9 81       	ldd	r30, Y+1	; 0x01
    201e:	fa 81       	ldd	r31, Y+2	; 0x02
    2020:	81 81       	ldd	r24, Z+1	; 0x01
    2022:	88 23       	and	r24, r24
    2024:	41 f4       	brne	.+16     	; 0x2036 <TIMER_init+0x94>
			TIMSK |=(1<<TOIE0);
    2026:	a9 e5       	ldi	r26, 0x59	; 89
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e9 e5       	ldi	r30, 0x59	; 89
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	81 60       	ori	r24, 0x01	; 1
    2032:	8c 93       	st	X, r24
    2034:	b3 c0       	rjmp	.+358    	; 0x219c <TIMER_init+0x1fa>
		}
		else if(Config_Ptr->mode == COMPARE_MODE){
    2036:	e9 81       	ldd	r30, Y+1	; 0x01
    2038:	fa 81       	ldd	r31, Y+2	; 0x02
    203a:	81 81       	ldd	r24, Z+1	; 0x01
    203c:	82 30       	cpi	r24, 0x02	; 2
    203e:	09 f0       	breq	.+2      	; 0x2042 <TIMER_init+0xa0>
    2040:	ad c0       	rjmp	.+346    	; 0x219c <TIMER_init+0x1fa>
		TIMSK |=(1<<OCIE0);
    2042:	a9 e5       	ldi	r26, 0x59	; 89
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e9 e5       	ldi	r30, 0x59	; 89
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	82 60       	ori	r24, 0x02	; 2
    204e:	8c 93       	st	X, r24
    2050:	a5 c0       	rjmp	.+330    	; 0x219c <TIMER_init+0x1fa>
		}
	}
	/*In case of timer1*/
	else if(Config_Ptr->timer_id == TIMER1){
    2052:	e9 81       	ldd	r30, Y+1	; 0x01
    2054:	fa 81       	ldd	r31, Y+2	; 0x02
    2056:	80 81       	ld	r24, Z
    2058:	81 30       	cpi	r24, 0x01	; 1
    205a:	09 f0       	breq	.+2      	; 0x205e <TIMER_init+0xbc>
    205c:	50 c0       	rjmp	.+160    	; 0x20fe <TIMER_init+0x15c>
		/*The below line is for initial value of the timer register */
		TCNT1  = Config_Ptr->timerStartValue;
    205e:	ac e4       	ldi	r26, 0x4C	; 76
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e9 81       	ldd	r30, Y+1	; 0x01
    2064:	fa 81       	ldd	r31, Y+2	; 0x02
    2066:	84 81       	ldd	r24, Z+4	; 0x04
    2068:	95 81       	ldd	r25, Z+5	; 0x05
    206a:	11 96       	adiw	r26, 0x01	; 1
    206c:	9c 93       	st	X, r25
    206e:	8e 93       	st	-X, r24
		/* To adjust the compare value
		 * In case of normal mode, this line is not important
		 */
		OCR1A  = Config_Ptr->compareValue;
    2070:	aa e4       	ldi	r26, 0x4A	; 74
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	e9 81       	ldd	r30, Y+1	; 0x01
    2076:	fa 81       	ldd	r31, Y+2	; 0x02
    2078:	86 81       	ldd	r24, Z+6	; 0x06
    207a:	97 81       	ldd	r25, Z+7	; 0x07
    207c:	11 96       	adiw	r26, 0x01	; 1
    207e:	9c 93       	st	X, r25
    2080:	8e 93       	st	-X, r24

		TCCR1A = (1<<FOC1A);
    2082:	ef e4       	ldi	r30, 0x4F	; 79
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	88 e0       	ldi	r24, 0x08	; 8
    2088:	80 83       	st	Z, r24
		TCCR1B=0;
    208a:	ee e4       	ldi	r30, 0x4E	; 78
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	10 82       	st	Z, r1
		 *  oring
		 *  mode<<1 =    0b 0000 1000
		 *               ------------
		 *               0b 0000 1111
		 * */
		TCCR1B = (TCCR1B & 0xE7) | (Config_Ptr->mode<<1);
    2090:	ae e4       	ldi	r26, 0x4E	; 78
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	ee e4       	ldi	r30, 0x4E	; 78
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	28 2f       	mov	r18, r24
    209c:	27 7e       	andi	r18, 0xE7	; 231
    209e:	e9 81       	ldd	r30, Y+1	; 0x01
    20a0:	fa 81       	ldd	r31, Y+2	; 0x02
    20a2:	81 81       	ldd	r24, Z+1	; 0x01
    20a4:	88 2f       	mov	r24, r24
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	82 2b       	or	r24, r18
    20ae:	8c 93       	st	X, r24
		/* The next line is to adjust the prescaler
		 * */
		TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    20b0:	ae e4       	ldi	r26, 0x4E	; 78
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	ee e4       	ldi	r30, 0x4E	; 78
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	98 2f       	mov	r25, r24
    20bc:	98 7f       	andi	r25, 0xF8	; 248
    20be:	e9 81       	ldd	r30, Y+1	; 0x01
    20c0:	fa 81       	ldd	r31, Y+2	; 0x02
    20c2:	82 81       	ldd	r24, Z+2	; 0x02
    20c4:	89 2b       	or	r24, r25
    20c6:	8c 93       	st	X, r24
		/*Enabling the interrupt of overflow and compare mode in order to execute the ISR code*/
		if(Config_Ptr->mode == NORMAL_MODE){
    20c8:	e9 81       	ldd	r30, Y+1	; 0x01
    20ca:	fa 81       	ldd	r31, Y+2	; 0x02
    20cc:	81 81       	ldd	r24, Z+1	; 0x01
    20ce:	88 23       	and	r24, r24
    20d0:	41 f4       	brne	.+16     	; 0x20e2 <TIMER_init+0x140>
			TIMSK |=(1<<TOIE1);
    20d2:	a9 e5       	ldi	r26, 0x59	; 89
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	e9 e5       	ldi	r30, 0x59	; 89
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	84 60       	ori	r24, 0x04	; 4
    20de:	8c 93       	st	X, r24
    20e0:	5d c0       	rjmp	.+186    	; 0x219c <TIMER_init+0x1fa>
		}
		else if(Config_Ptr->mode == COMPARE_MODE_TIMER1){
    20e2:	e9 81       	ldd	r30, Y+1	; 0x01
    20e4:	fa 81       	ldd	r31, Y+2	; 0x02
    20e6:	81 81       	ldd	r24, Z+1	; 0x01
    20e8:	84 30       	cpi	r24, 0x04	; 4
    20ea:	09 f0       	breq	.+2      	; 0x20ee <TIMER_init+0x14c>
    20ec:	57 c0       	rjmp	.+174    	; 0x219c <TIMER_init+0x1fa>
			TIMSK |=(1<<OCIE1A);
    20ee:	a9 e5       	ldi	r26, 0x59	; 89
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	e9 e5       	ldi	r30, 0x59	; 89
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	80 61       	ori	r24, 0x10	; 16
    20fa:	8c 93       	st	X, r24
    20fc:	4f c0       	rjmp	.+158    	; 0x219c <TIMER_init+0x1fa>
		}

	}
	/*In case of timer2*/
	else if(Config_Ptr->timer_id == TIMER2){
    20fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2100:	fa 81       	ldd	r31, Y+2	; 0x02
    2102:	80 81       	ld	r24, Z
    2104:	82 30       	cpi	r24, 0x02	; 2
    2106:	09 f0       	breq	.+2      	; 0x210a <TIMER_init+0x168>
    2108:	49 c0       	rjmp	.+146    	; 0x219c <TIMER_init+0x1fa>
		TCCR2 = (1<<FOC2);
    210a:	e5 e4       	ldi	r30, 0x45	; 69
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 e8       	ldi	r24, 0x80	; 128
    2110:	80 83       	st	Z, r24
		 *Oring with the result  0B1011 0111
		 *                      -------------
		 *                       0B1011 1111
		 * and then, we adjust the mode of operation of the timer0
		 * */
		TCCR2 = (TCCR2 & 0xB7) | (Config_Ptr->mode<<2);
    2112:	a5 e4       	ldi	r26, 0x45	; 69
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	e5 e4       	ldi	r30, 0x45	; 69
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	28 2f       	mov	r18, r24
    211e:	27 7b       	andi	r18, 0xB7	; 183
    2120:	e9 81       	ldd	r30, Y+1	; 0x01
    2122:	fa 81       	ldd	r31, Y+2	; 0x02
    2124:	81 81       	ldd	r24, Z+1	; 0x01
    2126:	88 2f       	mov	r24, r24
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	88 0f       	add	r24, r24
    2130:	99 1f       	adc	r25, r25
    2132:	82 2b       	or	r24, r18
    2134:	8c 93       	st	X, r24
		/* The next line is to adjust the prescaler
		 * */
		TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->prescaler2);
    2136:	a5 e4       	ldi	r26, 0x45	; 69
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e5 e4       	ldi	r30, 0x45	; 69
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	98 2f       	mov	r25, r24
    2142:	98 7f       	andi	r25, 0xF8	; 248
    2144:	e9 81       	ldd	r30, Y+1	; 0x01
    2146:	fa 81       	ldd	r31, Y+2	; 0x02
    2148:	83 81       	ldd	r24, Z+3	; 0x03
    214a:	89 2b       	or	r24, r25
    214c:	8c 93       	st	X, r24
		TCNT2 = (uint8)(Config_Ptr->timerStartValue);
    214e:	a4 e4       	ldi	r26, 0x44	; 68
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e9 81       	ldd	r30, Y+1	; 0x01
    2154:	fa 81       	ldd	r31, Y+2	; 0x02
    2156:	84 81       	ldd	r24, Z+4	; 0x04
    2158:	95 81       	ldd	r25, Z+5	; 0x05
    215a:	8c 93       	st	X, r24
		/* In case of normal mode, this line is not important
		 * */
		OCR2  = (uint8)(Config_Ptr->compareValue);
    215c:	a3 e4       	ldi	r26, 0x43	; 67
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e9 81       	ldd	r30, Y+1	; 0x01
    2162:	fa 81       	ldd	r31, Y+2	; 0x02
    2164:	86 81       	ldd	r24, Z+6	; 0x06
    2166:	97 81       	ldd	r25, Z+7	; 0x07
    2168:	8c 93       	st	X, r24
		/*Enabling the interrupt of overflow and compare mode in order to execute the ISR code*/
		if(Config_Ptr->mode == NORMAL_MODE){
    216a:	e9 81       	ldd	r30, Y+1	; 0x01
    216c:	fa 81       	ldd	r31, Y+2	; 0x02
    216e:	81 81       	ldd	r24, Z+1	; 0x01
    2170:	88 23       	and	r24, r24
    2172:	41 f4       	brne	.+16     	; 0x2184 <TIMER_init+0x1e2>
			TIMSK |=(1<<TOIE2);
    2174:	a9 e5       	ldi	r26, 0x59	; 89
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	e9 e5       	ldi	r30, 0x59	; 89
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	80 64       	ori	r24, 0x40	; 64
    2180:	8c 93       	st	X, r24
    2182:	0c c0       	rjmp	.+24     	; 0x219c <TIMER_init+0x1fa>
		}
		else if(Config_Ptr->mode == COMPARE_MODE){
    2184:	e9 81       	ldd	r30, Y+1	; 0x01
    2186:	fa 81       	ldd	r31, Y+2	; 0x02
    2188:	81 81       	ldd	r24, Z+1	; 0x01
    218a:	82 30       	cpi	r24, 0x02	; 2
    218c:	39 f4       	brne	.+14     	; 0x219c <TIMER_init+0x1fa>
		TIMSK |=(1<<OCIE2);
    218e:	a9 e5       	ldi	r26, 0x59	; 89
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e9 e5       	ldi	r30, 0x59	; 89
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	80 68       	ori	r24, 0x80	; 128
    219a:	8c 93       	st	X, r24
		}
	}

}
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <TIMER0_setCallBack>:



void TIMER0_setCallBack(void (*a_ptr)(void)){
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <TIMER0_setCallBack+0x6>
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	9a 83       	std	Y+2, r25	; 0x02
    21b2:	89 83       	std	Y+1, r24	; 0x01
	/*a_ptr is local variable so it will be deleted after quiting the function and we need to save the
	 * value of function address and that can be done by putting its value inside global pointer to function
	 * */
	g_timer0CallBackPtr=a_ptr;
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	9a 81       	ldd	r25, Y+2	; 0x02
    21b8:	90 93 74 00 	sts	0x0074, r25
    21bc:	80 93 73 00 	sts	0x0073, r24
}
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <TIMER1_setCallBack>:

void TIMER1_setCallBack(void (*a_ptr)(void)){
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <TIMER1_setCallBack+0x6>
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	9a 83       	std	Y+2, r25	; 0x02
    21d6:	89 83       	std	Y+1, r24	; 0x01
	/*a_ptr is local variable so it will be deleted after quiting the function and we need to save the
	 * value of function address and that can be done by putting its value inside global pointer to function
	 * */
	g_timer1CallBackPtr=a_ptr;
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	9a 81       	ldd	r25, Y+2	; 0x02
    21dc:	90 93 76 00 	sts	0x0076, r25
    21e0:	80 93 75 00 	sts	0x0075, r24
}
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <TIMER2_setCallBack>:

void TIMER2_setCallBack(void (*a_ptr)(void)){
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	00 d0       	rcall	.+0      	; 0x21f4 <TIMER2_setCallBack+0x6>
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	9a 83       	std	Y+2, r25	; 0x02
    21fa:	89 83       	std	Y+1, r24	; 0x01
	/*a_ptr is local variable so it will be deleted after quiting the function and we need to save the
	 * value of function address and that can be done by putting its value inside global pointer to function
	 * */
	g_timer2CallBackPtr=a_ptr;
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2200:	90 93 78 00 	sts	0x0078, r25
    2204:	80 93 77 00 	sts	0x0077, r24
}
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <TIMER_DeInit>:

void TIMER_DeInit(TIMER_ID timer_id){
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	0f 92       	push	r0
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	89 83       	std	Y+1, r24	; 0x01
	/*Based on Timer ID , we will de-initializing the timer*/
	/*In case of timer0*/
	if(timer_id == TIMER0){
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	88 23       	and	r24, r24
    2222:	89 f4       	brne	.+34     	; 0x2246 <TIMER_DeInit+0x34>
		/*Here, we will put zero in all timer0 registers */
	    TCCR0=0;
    2224:	e3 e5       	ldi	r30, 0x53	; 83
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	10 82       	st	Z, r1
	    TCNT0=0;
    222a:	e2 e5       	ldi	r30, 0x52	; 82
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	10 82       	st	Z, r1
	    OCR0=0;
    2230:	ec e5       	ldi	r30, 0x5C	; 92
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	10 82       	st	Z, r1
	    /*disable the interrupt module of timer0*/
	    TIMSK &=~(1<<TOIE0) &~(1<<OCIE0);
    2236:	a9 e5       	ldi	r26, 0x59	; 89
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e9 e5       	ldi	r30, 0x59	; 89
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	8c 7f       	andi	r24, 0xFC	; 252
    2242:	8c 93       	st	X, r24
    2244:	2c c0       	rjmp	.+88     	; 0x229e <TIMER_DeInit+0x8c>
	}
	/*In case of timer1*/
	else if(timer_id == TIMER1){
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	81 30       	cpi	r24, 0x01	; 1
    224a:	b1 f4       	brne	.+44     	; 0x2278 <TIMER_DeInit+0x66>
		/*Here, we will put zero in all timer0 registers */
	    TCCR1A=0;
    224c:	ef e4       	ldi	r30, 0x4F	; 79
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	10 82       	st	Z, r1
	    TCCR1B=0;
    2252:	ee e4       	ldi	r30, 0x4E	; 78
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	10 82       	st	Z, r1
	    TCNT1=0;
    2258:	ec e4       	ldi	r30, 0x4C	; 76
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	11 82       	std	Z+1, r1	; 0x01
    225e:	10 82       	st	Z, r1
	    OCR1A=0;
    2260:	ea e4       	ldi	r30, 0x4A	; 74
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	11 82       	std	Z+1, r1	; 0x01
    2266:	10 82       	st	Z, r1
	    /*disable the interrupt module of timer1*/
	    TIMSK &=~(1<<TOIE1) &~(1<<OCIE1A);
    2268:	a9 e5       	ldi	r26, 0x59	; 89
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	e9 e5       	ldi	r30, 0x59	; 89
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	8b 7e       	andi	r24, 0xEB	; 235
    2274:	8c 93       	st	X, r24
    2276:	13 c0       	rjmp	.+38     	; 0x229e <TIMER_DeInit+0x8c>
	}
	/*In case of timer2*/
	else if(timer_id == TIMER2){
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	82 30       	cpi	r24, 0x02	; 2
    227c:	81 f4       	brne	.+32     	; 0x229e <TIMER_DeInit+0x8c>
		/*Here, we will put zero in all timer0 registers */
     	TCCR2=0;
    227e:	e5 e4       	ldi	r30, 0x45	; 69
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	10 82       	st	Z, r1
     	TCNT2=0;
    2284:	e4 e4       	ldi	r30, 0x44	; 68
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	10 82       	st	Z, r1
    	OCR2=0;
    228a:	e3 e4       	ldi	r30, 0x43	; 67
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	10 82       	st	Z, r1
    	/*disable the interrupt module of timer2*/
	    TIMSK &=~(1<<TOIE2) &~(1<<OCIE2);
    2290:	a9 e5       	ldi	r26, 0x59	; 89
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	e9 e5       	ldi	r30, 0x59	; 89
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	8f 73       	andi	r24, 0x3F	; 63
    229c:	8c 93       	st	X, r24
	}
}
    229e:	0f 90       	pop	r0
    22a0:	cf 91       	pop	r28
    22a2:	df 91       	pop	r29
    22a4:	08 95       	ret

000022a6 <__udivmodqi4>:
    22a6:	99 1b       	sub	r25, r25
    22a8:	79 e0       	ldi	r23, 0x09	; 9
    22aa:	04 c0       	rjmp	.+8      	; 0x22b4 <__udivmodqi4_ep>

000022ac <__udivmodqi4_loop>:
    22ac:	99 1f       	adc	r25, r25
    22ae:	96 17       	cp	r25, r22
    22b0:	08 f0       	brcs	.+2      	; 0x22b4 <__udivmodqi4_ep>
    22b2:	96 1b       	sub	r25, r22

000022b4 <__udivmodqi4_ep>:
    22b4:	88 1f       	adc	r24, r24
    22b6:	7a 95       	dec	r23
    22b8:	c9 f7       	brne	.-14     	; 0x22ac <__udivmodqi4_loop>
    22ba:	80 95       	com	r24
    22bc:	08 95       	ret

000022be <__divmodhi4>:
    22be:	97 fb       	bst	r25, 7
    22c0:	09 2e       	mov	r0, r25
    22c2:	07 26       	eor	r0, r23
    22c4:	0a d0       	rcall	.+20     	; 0x22da <__divmodhi4_neg1>
    22c6:	77 fd       	sbrc	r23, 7
    22c8:	04 d0       	rcall	.+8      	; 0x22d2 <__divmodhi4_neg2>
    22ca:	0c d0       	rcall	.+24     	; 0x22e4 <__udivmodhi4>
    22cc:	06 d0       	rcall	.+12     	; 0x22da <__divmodhi4_neg1>
    22ce:	00 20       	and	r0, r0
    22d0:	1a f4       	brpl	.+6      	; 0x22d8 <__divmodhi4_exit>

000022d2 <__divmodhi4_neg2>:
    22d2:	70 95       	com	r23
    22d4:	61 95       	neg	r22
    22d6:	7f 4f       	sbci	r23, 0xFF	; 255

000022d8 <__divmodhi4_exit>:
    22d8:	08 95       	ret

000022da <__divmodhi4_neg1>:
    22da:	f6 f7       	brtc	.-4      	; 0x22d8 <__divmodhi4_exit>
    22dc:	90 95       	com	r25
    22de:	81 95       	neg	r24
    22e0:	9f 4f       	sbci	r25, 0xFF	; 255
    22e2:	08 95       	ret

000022e4 <__udivmodhi4>:
    22e4:	aa 1b       	sub	r26, r26
    22e6:	bb 1b       	sub	r27, r27
    22e8:	51 e1       	ldi	r21, 0x11	; 17
    22ea:	07 c0       	rjmp	.+14     	; 0x22fa <__udivmodhi4_ep>

000022ec <__udivmodhi4_loop>:
    22ec:	aa 1f       	adc	r26, r26
    22ee:	bb 1f       	adc	r27, r27
    22f0:	a6 17       	cp	r26, r22
    22f2:	b7 07       	cpc	r27, r23
    22f4:	10 f0       	brcs	.+4      	; 0x22fa <__udivmodhi4_ep>
    22f6:	a6 1b       	sub	r26, r22
    22f8:	b7 0b       	sbc	r27, r23

000022fa <__udivmodhi4_ep>:
    22fa:	88 1f       	adc	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	5a 95       	dec	r21
    2300:	a9 f7       	brne	.-22     	; 0x22ec <__udivmodhi4_loop>
    2302:	80 95       	com	r24
    2304:	90 95       	com	r25
    2306:	bc 01       	movw	r22, r24
    2308:	cd 01       	movw	r24, r26
    230a:	08 95       	ret

0000230c <__prologue_saves__>:
    230c:	2f 92       	push	r2
    230e:	3f 92       	push	r3
    2310:	4f 92       	push	r4
    2312:	5f 92       	push	r5
    2314:	6f 92       	push	r6
    2316:	7f 92       	push	r7
    2318:	8f 92       	push	r8
    231a:	9f 92       	push	r9
    231c:	af 92       	push	r10
    231e:	bf 92       	push	r11
    2320:	cf 92       	push	r12
    2322:	df 92       	push	r13
    2324:	ef 92       	push	r14
    2326:	ff 92       	push	r15
    2328:	0f 93       	push	r16
    232a:	1f 93       	push	r17
    232c:	cf 93       	push	r28
    232e:	df 93       	push	r29
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	ca 1b       	sub	r28, r26
    2336:	db 0b       	sbc	r29, r27
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	09 94       	ijmp

00002344 <__epilogue_restores__>:
    2344:	2a 88       	ldd	r2, Y+18	; 0x12
    2346:	39 88       	ldd	r3, Y+17	; 0x11
    2348:	48 88       	ldd	r4, Y+16	; 0x10
    234a:	5f 84       	ldd	r5, Y+15	; 0x0f
    234c:	6e 84       	ldd	r6, Y+14	; 0x0e
    234e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2350:	8c 84       	ldd	r8, Y+12	; 0x0c
    2352:	9b 84       	ldd	r9, Y+11	; 0x0b
    2354:	aa 84       	ldd	r10, Y+10	; 0x0a
    2356:	b9 84       	ldd	r11, Y+9	; 0x09
    2358:	c8 84       	ldd	r12, Y+8	; 0x08
    235a:	df 80       	ldd	r13, Y+7	; 0x07
    235c:	ee 80       	ldd	r14, Y+6	; 0x06
    235e:	fd 80       	ldd	r15, Y+5	; 0x05
    2360:	0c 81       	ldd	r16, Y+4	; 0x04
    2362:	1b 81       	ldd	r17, Y+3	; 0x03
    2364:	aa 81       	ldd	r26, Y+2	; 0x02
    2366:	b9 81       	ldd	r27, Y+1	; 0x01
    2368:	ce 0f       	add	r28, r30
    236a:	d1 1d       	adc	r29, r1
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	de bf       	out	0x3e, r29	; 62
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	cd bf       	out	0x3d, r28	; 61
    2376:	ed 01       	movw	r28, r26
    2378:	08 95       	ret

0000237a <_exit>:
    237a:	f8 94       	cli

0000237c <__stop_program>:
    237c:	ff cf       	rjmp	.-2      	; 0x237c <__stop_program>
